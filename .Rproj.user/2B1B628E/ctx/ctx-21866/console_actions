{
    "data" : [
        "      ## -9999 -1",
        "+ ",
        "      ## # enter list of fleet number and allocation group assignment, if any; terminate with fleet=-9999",
        "+ ",
        "      ## -9999 -1",
        "+ ",
        "      if(any(allnums[i+c(0,2,4)] != -9999)){",
        "+ ",
        "        stop(\"sorry, SS_readforecast doesn't yet work for 3.30 models with catch caps or allocation groups\")",
        "+ ",
        "      }",
        "+ ",
        "      i <- i+6 # increment indicator past section on caps and allocations",
        "+ ",
        "",
        "+ ",
        "      # NULL variables that may be needed for SS_writeforecast",
        "+ ",
        "      mylist$max_totalcatch_by_fleet <- NULL",
        "+ ",
        "      mylist$max_totalcatch_by_area <- NULL",
        "+ ",
        "      mylist$fleet_assignment_to_allocation_group <- NULL",
        "+ ",
        "      mylist$N_allocation_groups <- 0",
        "+ ",
        "      mylist$allocation_among_groups <- NULL",
        "+ ",
        "",
        "+ ",
        "      mylist$InputBasis <- allnums[i]; i <- i+1",
        "+ ",
        "",
        "+ ",
        "      # forcast catch levels",
        "+ ",
        "      if(allnums[i]==-9999){",
        "+ ",
        "        ForeCatch <- NULL",
        "+ ",
        "        i <- i+4",
        "+ ",
        "      }else{",
        "+ ",
        "        # offset from current position in vector to ending point",
        "+ ",
        "        all9999 <- which(allnums == -9999)",
        "+ ",
        "        ForeCatch.end <- min(all9999[all9999 > i])-1",
        "+ ",
        "        Nvals <- (ForeCatch.end - i + 1)",
        "+ ",
        "        # even final line starting with -9999 needs to have 4 values",
        "+ ",
        "        # so number of values should always be evenly divisible by 4",
        "+ ",
        "        if(Nvals %% 4 != 0){",
        "+ ",
        "          stop(\"Error in read of input forecast catch.\\n\",",
        "+ ",
        "               \"Number of values should be a multiple of 4.\\n\",",
        "+ ",
        "               \"Values:\\n\", paste(allnums[i:ForeCatch.end], collapse=\"\\n\"))",
        "+ ",
        "        }",
        "+ ",
        "        ForeCatch <- data.frame(matrix(",
        "+ ",
        "          allnums[i:ForeCatch.end], nrow=Nvals/4, ncol=4, byrow=TRUE))",
        "+ ",
        "        # increment index",
        "+ ",
        "        # (+5 to skip over -9999 and 3 placeholders at end of input matrix)",
        "+ ",
        "        i <- ForeCatch.end + 5",
        "+ ",
        "        names(ForeCatch) <- c(\"Year\",\"Seas\",\"Fleet\",\"Catch_or_F\")",
        "+ ",
        "        if(verbose){",
        "+ ",
        "          cat(\"  Catch inputs (Ncatch = \",Nvals/4,\")\\n\", sep=\"\")",
        "+ ",
        "          print(ForeCatch)",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "> ",
        "# function to read Stock Synthesis forecast files",
        "> ",
        "  if(!(version==\"3.24\" | version==\"3.30\" | version==3.3)){",
        "+ ",
        "    # turns out 3.30 != \"3.30\" in R",
        "+ ",
        "    stop('version must be either 3.24 or 3.30')",
        "+ ",
        "  }",
        "> ",
        "",
        "> ",
        "  if(verbose) cat(\"running SS_readforecast\\n\")",
        "running SS_readforecast\n",
        "> ",
        "  forecast <- readLines(file,warn=F)",
        "> ",
        "",
        "> ",
        "  mylist <- list()",
        "> ",
        "  mylist$sourcefile <- file",
        "> ",
        "  mylist$type <- \"Stock_Synthesis_forecast_file\"",
        "> ",
        "  mylist$SSversion <- version",
        "> ",
        "",
        "> ",
        "  # get numbers (could be better integrated with function above)",
        "> ",
        "  allnums <- NULL",
        "> ",
        "forecast",
        " [1] \"#C forecast file written by R function SS_writeforecast\"                                                      \n [2] \"#C rerun model to get more complete formatting in forecast.ss_new\"                                            \n [3] \"#C should work with SS version: 3.24\"                                                                         \n [4] \"#C file write time: 2019-06-13 10:42:17\"                                                                      \n [5] \"#\"                                                                                                            ",
        "\n [6] \"1 #_benchmarks\"                                                                                               \n [7] \"2 #_MSY\"                                                                                                      \n [8] \"0.5 #_SPRtarget\"                                                                                              \n [9] \"0.4 #_Btarget\"                                                                                                \n[10] \"#_Bmark_years: beg_bio end_bio beg_selex end_selex beg_alloc end_alloc\"                                       ",
        "\n[11] \"0 0 0 0 0 0\"                                                                                                  \n[12] \"1 #_Bmark_relF_Basis\"                                                                                         \n[13] \"1 #_Forecast\"                                                                                                 \n[14] \"17 #_Nforecastyrs\"                                                                                            \n[15] \"1 #_F_scalar\"                                                                                                 ",
        "\n[16] \"#_Fcast_years:  beg_selex, end_selex, beg_relF, end_relF\"                                                     \n[17] \"0 0 0 0\"                                                                                                      \n[18] \"1 #_ControlRuleMethod\"                                                                                        \n[19] \"0.4 #_BforconstantF\"                                                                                          \n[20] \"0.1 #_BfornoF\"                                                                                                ",
        "\n[21] \"0.857 #_Flimitfraction\"                                                                                       \n[22] \"3 #_N_forecast_loops\"                                                                                         \n[23] \"3 #_First_forecast_loop_with_stochastic_recruitment\"                                                          \n[24] \"0 #_Forecast_loop_control_3\"                                                                                  \n[25] \"0 #_Forecast_loop_control_4\"                                                                                  ",
        "\n[26] \"0 #_Forecast_loop_control_5\"                                                                                  \n[27] \"2021 #_FirstYear_for_caps_and_allocations\"                                                                    \n[28] \"0 #_stddev_of_log_catch_ratio\"                                                                                \n[29] \"0 #_Do_West_Coast_gfish_rebuilder_output\"                                                                     \n[30] \"-1 #_Ydecl\"                                                                                                   ",
        "\n[31] \"-1 #_Yinit\"                                                                                                   \n[32] \"2 #_fleet_relative_F\"                                                                                         \n[33] \"2 #_basis_for_fcast_catch_tuning\"                                                                             \n[34] \"0.5 0.084261838 0.415738162 #_vals_fleet_relative_f\"                                                          \n[35] \"# max totalcatch by fleet (-1 to have no max)\"                                                                ",
        "\n[36] \"-1 -1 -1\"                                                                                                     \n[37] \"# max totalcatch by area (-1 to have no max)\"                                                                 \n[38] \"-1\"                                                                                                           \n[39] \"# fleet assignment to allocation group (enter group ID# for each fleet, 0 for not included in an alloc group)\"\n[40] \"0 0 0\"                                                                                                        ",
        "\n[41] \"18 #_Ncatch\"                                                                                                  \n[42] \"2 #_InputBasis\"                                                                                               \n[43] \" #_Year Seas Fleet Catch_or_F\"                                                                                \n[44] \"   2015    1     1      0.020\"                                                                                \n[45] \"   2015    1     2      0.190\"                                                                                ",
        "\n[46] \"   2015    1     3      1.760\"                                                                                \n[47] \"   2016    1     1      0.020\"                                                                                \n[48] \"   2016    1     2      0.200\"                                                                                \n[49] \"   2016    1     3      1.810\"                                                                                \n[50] \"   2017    1     1      1.339\"                                                                                ",
        "\n[51] \"   2017    1     2      0.182\"                                                                                \n[52] \"   2017    1     3      1.157\"                                                                                \n[53] \"   2018    1     1      1.436\"                                                                                \n[54] \"   2018    1     2      0.242\"                                                                                \n[55] \"   2018    1     3      1.194\"                                                                                ",
        "\n[56] \"   2019    1     1      1.436\"                                                                                \n[57] \"   2019    1     2      0.242\"                                                                                \n[58] \"   2019    1     3      1.194\"                                                                                \n[59] \"   2020    1     1      1.436\"                                                                                \n[60] \"   2020    1     2      0.242\"                                                                                ",
        "\n[61] \"   2020    1     3      1.194\"                                                                                \n[62] \"#\"                                                                                                            \n[63] \"999 # verify end of input \"                                                                                   \n",
        "> ",
        "for(i in 1:length(forecast)){",
        "+ ",
        "    # split apart numbers from text in file",
        "+ ",
        "    mysplit <- strsplit(forecast[i],split=\"[[:blank:]]+\")[[1]]",
        "+ ",
        "    mysplit <- mysplit[mysplit!=\"\"]",
        "+ ",
        "    nums <- suppressWarnings(as.numeric(mysplit))",
        "+ ",
        "    if(sum(is.na(nums)) > 0) maxcol <- min((1:length(nums))[is.na(nums)])-1",
        "+ ",
        "    else maxcol <- length(nums)",
        "+ ",
        "    if(maxcol > 0){",
        "+ ",
        "      nums <- nums[1:maxcol]",
        "+ ",
        "      allnums <- c(allnums, nums)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "# go through numerical values and save as elements of a big list",
        "> ",
        "  i <- 1",
        "> ",
        "mylist$benchmarks <- allnums[i]; i <- i+1",
        "> ",
        "mylist$MSY <- allnums[i]; i <- i+1",
        "> ",
        "mylist$SPRtarget <- allnums[i]; i <- i+1",
        "> ",
        "mylist$Btarget <- allnums[i]; i <- i+1",
        "> ",
        "if(version==3.24){",
        "+ ",
        "    mylist$Bmark_years <- allnums[i:(i+5)]; i <- i+6",
        "+ ",
        "  }else{",
        "+ ",
        "    mylist$Bmark_years <- allnums[i:(i+9)]; i <- i+10",
        "+ ",
        "  }",
        "> ",
        "if(verbose){",
        "+ ",
        "    cat(\"Benchmark years: \", mylist$Bmark_years, \"\\n\")",
        "+ ",
        "  }",
        "Benchmark years:  0 0 0 0 0 0 \n",
        "> ",
        "mylist$Bmark_relF_Basis <- allnums[i]; i <- i+1",
        "> ",
        "mylist$Forecast <- Forecast <- allnums[i]; i <- i+1",
        "> ",
        "# test for 0 value of Forecast and only continue if non-zero or readAll",
        "> ",
        "  if(Forecast==0 & !readAll){",
        "+ ",
        "    if(verbose){",
        "+ ",
        "      cat(\"Forecast=0 and input readAll=FALSE so skipping remainder of file\\n\")",
        "+ ",
        "    }",
        "+ ",
        "  }else{",
        "+ ",
        "    if(verbose){",
        "+ ",
        "      cat(\"Forecast =\", Forecast, \"\\n\")",
        "+ ",
        "    }",
        "+ ",
        "    mylist$Nforecastyrs <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$F_scalar <- allnums[i]; i <- i+1",
        "+ ",
        "    if(version==3.24){",
        "+ ",
        "      mylist$Fcast_years <- allnums[i:(i+3)]; i <- i+4",
        "+ ",
        "    }else{",
        "+ ",
        "      mylist$Fcast_years <- allnums[i:(i+5)]; i <- i+6",
        "+ ",
        "    }",
        "+ ",
        "    if(verbose){",
        "+ ",
        "      cat(\"Forecast years: \", mylist$Fcast_years, \"\\n\")",
        "+ ",
        "    }",
        "+ ",
        "    mylist$Fcast_selex <- NA",
        "+ ",
        "    if(version==\"3.30\" | version==3.3){",
        "+ ",
        "      mylist$Fcast_selex <- allnums[i]; i <- i+1 # not present in early 3.30 versions",
        "+ ",
        "      if(verbose){",
        "+ ",
        "        cat(\"Forecast selectivity option: \", mylist$Fcast_selex, \"\\n\")",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "    mylist$ControlRuleMethod <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$BforconstantF <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$BfornoF <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$Flimitfraction <- allnums[i]; i <- i+1",
        "+ ",
        "    if (mylist$Flimitfraction < 0) {",
        "+ ",
        "      ii <- i",
        "+ ",
        "      while (allnums[ii] > 0) ii <- ii + 1",
        "+ ",
        "      mylist$Flimitfraction_m <- data.frame(matrix(allnums[i:(ii + 1)],",
        "+ ",
        "                                                   ncol = 2, byrow = TRUE))",
        "+ ",
        "      colnames(mylist$Flimitfraction_m) <- c(\"Year\", \"Fraction\")",
        "+ ",
        "      i <- ii + 2",
        "+ ",
        "      remove(ii)",
        "+ ",
        "    }",
        "+ ",
        "    mylist$N_forecast_loops <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$First_forecast_loop_with_stochastic_recruitment <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$Forecast_loop_control_3 <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$Forecast_loop_control_4 <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$Forecast_loop_control_5 <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$FirstYear_for_caps_and_allocations <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$stddev_of_log_catch_ratio <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$Do_West_Coast_gfish_rebuilder_output <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$Ydecl <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$Yinit <- allnums[i]; i <- i+1",
        "+ ",
        "    mylist$fleet_relative_F <- allnums[i]; i <- i+1",
        "+ ",
        "    # if(mylist$fleet_relative_F==2){",
        "+ ",
        "      # stop(\"SS_readforecast doesn't yet support option 2 for 'fleet relative F'\")",
        "+ ",
        "    # }",
        "+ ",
        "    mylist$basis_for_fcast_catch_tuning <- allnums[i]; i <- i+1",
        "+ ",
        "    if(version==3.24){",
        "+ ",
        "      if(verbose){",
        "+ ",
        "        cat('reading section on fleet- and area-specific inputs based on 3.24 format\\n')",
        "+ ",
        "      }",
        "+ ",
        "      # the following section is somewhat different between 3.24 and 3.30",
        "+ ",
        "      mylist$max_totalcatch_by_fleet <- allnums[i:(i+Nfleets-1)]; i <- i+Nfleets",
        "+ ",
        "      if(verbose) cat(\"  max_totalcatch_by_fleet =\",mylist$max_totalcatch_by_fleet,\"\\n\")",
        "+ ",
        "      mylist$max_totalcatch_by_area <- allnums[i:(i+Nareas-1)]; i <- i+Nareas",
        "+ ",
        "      if(verbose) cat(\"  max_totalcatch_by_area =\",mylist$max_totalcatch_by_area,\"\\n\")",
        "+ ",
        "      mylist$fleet_assignment_to_allocation_group <- allnums[i:(i+Nfleets-1)]; i <- i+Nfleets",
        "+ ",
        "      # allocation groups",
        "+ ",
        "      if(verbose) cat(\"  fleet_assignment_to_allocation_group =\",mylist$fleet_assignment_to_allocation_group,\"\\n\")",
        "+ ",
        "      if(any(mylist$fleet_assignment_to_allocation_group!=0)){",
        "+ ",
        "        mylist$N_allocation_groups <- max(mylist$fleet_assignment_to_allocation_group)",
        "+ ",
        "        allocation_among_groups <- allnums[i:(i+mylist$N_allocation_groups*nseas-1)]; i <- i+mylist$N_allocation_groups*nseas",
        "+ ",
        "        mylist$allocation_among_groups<-",
        "+ ",
        "          as.data.frame(t(array(data=allocation_among_groups,dim=c(mylist$N_allocation_groups,nseas))))",
        "+ ",
        "        colnames(mylist$allocation_among_groups)<-paste0(\"Grp\",1:mylist$N_allocation_groups)",
        "+ ",
        "      }else{",
        "+ ",
        "        mylist$N_allocation_groups <- 0",
        "+ ",
        "        mylist$allocation_among_groups <- NULL",
        "+ ",
        "      }",
        "+ ",
        "      mylist$Ncatch <- Ncatch <- allnums[i]; i <- i+1",
        "+ ",
        "      mylist$InputBasis <- allnums[i]; i <- i+1",
        "+ ",
        "      # forcast catch levels",
        "+ ",
        "      if(Ncatch==0){",
        "+ ",
        "        ForeCatch <- NULL",
        "+ ",
        "      }else{",
        "+ ",
        "        ForeCatch <- data.frame(matrix(",
        "+ ",
        "          allnums[i:(i+Ncatch*4-1)],nrow=Ncatch,ncol=4,byrow=TRUE))",
        "+ ",
        "        i <- i+Ncatch*4",
        "+ ",
        "        names(ForeCatch) <- c(\"Year\",\"Seas\",\"Fleet\",\"Catch_or_F\")",
        "+ ",
        "        if(verbose){",
        "+ ",
        "          cat(\"  Catch inputs (Ncatch = \",Ncatch,\")\\n\", sep=\"\")",
        "+ ",
        "          print(ForeCatch)",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "    if(version==\"3.30\" | version==3.3){",
        "+ ",
        "      if(verbose){",
        "+ ",
        "        cat('reading section on fleet- and area-specific inputs based on 3.30 format\\n')",
        "+ ",
        "      }",
        "+ ",
        "      # check for any catch caps or allocation groups",
        "+ ",
        "      # (indicated by additional values rather than something like the following lines:",
        "+ ",
        "      ## # enter list of fleet number and max for fleets with max annual catch; terminate with fleet=-9999",
        "+ ",
        "      ## -9999 -1",
        "+ ",
        "      ## # enter list of area ID and max annual catch; terminate with area=-9999",
        "+ ",
        "      ## -9999 -1",
        "+ ",
        "      ## # enter list of fleet number and allocation group assignment, if any; terminate with fleet=-9999",
        "+ ",
        "      ## -9999 -1",
        "+ ",
        "      if(any(allnums[i+c(0,2,4)] != -9999)){",
        "+ ",
        "        stop(\"sorry, SS_readforecast doesn't yet work for 3.30 models with catch caps or allocation groups\")",
        "+ ",
        "      }",
        "+ ",
        "      i <- i+6 # increment indicator past section on caps and allocations",
        "+ ",
        "",
        "+ ",
        "      # NULL variables that may be needed for SS_writeforecast",
        "+ ",
        "      mylist$max_totalcatch_by_fleet <- NULL",
        "+ ",
        "      mylist$max_totalcatch_by_area <- NULL",
        "+ ",
        "      mylist$fleet_assignment_to_allocation_group <- NULL",
        "+ ",
        "      mylist$N_allocation_groups <- 0",
        "+ ",
        "      mylist$allocation_among_groups <- NULL",
        "+ ",
        "",
        "+ ",
        "      mylist$InputBasis <- allnums[i]; i <- i+1",
        "+ ",
        "",
        "+ ",
        "      # forcast catch levels",
        "+ ",
        "      if(allnums[i]==-9999){",
        "+ ",
        "        ForeCatch <- NULL",
        "+ ",
        "        i <- i+4",
        "+ ",
        "      }else{",
        "+ ",
        "        # offset from current position in vector to ending point",
        "+ ",
        "        all9999 <- which(allnums == -9999)",
        "+ ",
        "        ForeCatch.end <- min(all9999[all9999 > i])-1",
        "+ ",
        "        Nvals <- (ForeCatch.end - i + 1)",
        "+ ",
        "        # even final line starting with -9999 needs to have 4 values",
        "+ ",
        "        # so number of values should always be evenly divisible by 4",
        "+ ",
        "        if(Nvals %% 4 != 0){",
        "+ ",
        "          stop(\"Error in read of input forecast catch.\\n\",",
        "+ ",
        "               \"Number of values should be a multiple of 4.\\n\",",
        "+ ",
        "               \"Values:\\n\", paste(allnums[i:ForeCatch.end], collapse=\"\\n\"))",
        "+ ",
        "        }",
        "+ ",
        "        ForeCatch <- data.frame(matrix(",
        "+ ",
        "          allnums[i:ForeCatch.end], nrow=Nvals/4, ncol=4, byrow=TRUE))",
        "+ ",
        "        # increment index",
        "+ ",
        "        # (+5 to skip over -9999 and 3 placeholders at end of input matrix)",
        "+ ",
        "        i <- ForeCatch.end + 5",
        "+ ",
        "        names(ForeCatch) <- c(\"Year\",\"Seas\",\"Fleet\",\"Catch_or_F\")",
        "+ ",
        "        if(verbose){",
        "+ ",
        "          cat(\"  Catch inputs (Ncatch = \",Nvals/4,\")\\n\", sep=\"\")",
        "+ ",
        "          print(ForeCatch)",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "    mylist$ForeCatch <- ForeCatch",
        "+ ",
        "    # check final value",
        "+ ",
        "    if(allnums[i]==999){",
        "+ ",
        "      if(verbose) cat(\"read of forecast file complete (final value = 999)\\n\")",
        "+ ",
        "    }else{",
        "+ ",
        "      cat(\"Error: final value is\", allnums[i],\" but should be 999\\n\")",
        "+ ",
        "    }",
        "+ ",
        "  } # end read of additional values beyond \"Forecast\" input",
        "Forecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in array(data = allocation_among_groups, dim = c(mylist$N_allocation_groups,  : \n  negative length vectors are not allowed\n",
        "> ",
        "# the following section is somewhat different between 3.24 and 3.30",
        "> ",
        "      mylist$max_totalcatch_by_fleet <- allnums[i:(i+Nfleets-1)]; i <- i+Nfleets",
        "> ",
        "if(verbose) cat(\"  max_totalcatch_by_fleet =\",mylist$max_totalcatch_by_fleet,\"\\n\")",
        "  max_totalcatch_by_fleet = -1 0 0 \n",
        "> ",
        "mylist$max_totalcatch_by_area <- allnums[i:(i+Nareas-1)]; i <- i+Nareas",
        "> ",
        "allnums",
        "  [1]    1.00000000    2.00000000    0.50000000    0.40000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000\n [11]    1.00000000    1.00000000   17.00000000    1.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000    0.40000000\n [21]    0.10000000    0.85700000    3.00000000    3.00000000    0.00000000    0.00000000    0.00000000 2021.00000000    0.00000000    0.00000000\n [31]   -1.00000000   -1.00000000    2.00000000    2.00000000    0.50000000",
        "    0.08426184    0.41573816   -1.00000000   -1.00000000   -1.00000000\n [41]   -1.00000000    0.00000000    0.00000000    0.00000000   18.00000000    2.00000000 2015.00000000    1.00000000    1.00000000    0.02000000\n [51] 2015.00000000    1.00000000    2.00000000    0.19000000 2015.00000000    1.00000000    3.00000000    1.76000000 2016.00000000    1.00000000\n [61]    1.00000000    0.02000000 2016.00000000    1.00000000    2.00000000    0.20000000 2016.00000000    1.00000000    3.00000000    1.81000000\n [71]",
        " 2017.00000000    1.00000000    1.00000000    1.33900000 2017.00000000    1.00000000    2.00000000    0.18200000 2017.00000000    1.00000000\n [81]    3.00000000    1.15700000 2018.00000000    1.00000000    1.00000000    1.43600000 2018.00000000    1.00000000    2.00000000    0.24200000\n [91] 2018.00000000    1.00000000    3.00000000    1.19400000 2019.00000000    1.00000000    1.00000000    1.43600000 2019.00000000    1.00000000\n[101]    2.00000000    0.24200000 2019.00000000    1.00000000    3.00000000    1.19400000",
        " 2020.00000000    1.00000000    1.00000000    1.43600000\n[111] 2020.00000000    1.00000000    2.00000000    0.24200000 2020.00000000    1.00000000    3.00000000    1.19400000  999.00000000\n",
        "> ",
        "# get numbers (could be better integrated with function above)",
        "> ",
        "  allnums <- NULL",
        "> ",
        "for(i in 1:length(forecast)){",
        "+ ",
        "    # split apart numbers from text in file",
        "+ ",
        "    mysplit <- strsplit(forecast[i],split=\"[[:blank:]]+\")[[1]]",
        "+ ",
        "    mysplit <- mysplit[mysplit!=\"\"]",
        "+ ",
        "    nums <- suppressWarnings(as.numeric(mysplit))",
        "+ ",
        "    if(sum(is.na(nums)) > 0) maxcol <- min((1:length(nums))[is.na(nums)])-1",
        "+ ",
        "    else maxcol <- length(nums)",
        "+ ",
        "    if(maxcol > 0){",
        "+ ",
        "      nums <- nums[1:maxcol]",
        "+ ",
        "      allnums <- c(allnums, nums)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "allnums",
        "  [1]    1.00000000    2.00000000    0.50000000    0.40000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000\n [11]    1.00000000    1.00000000   17.00000000    1.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000    0.40000000\n [21]    0.10000000    0.85700000    3.00000000    3.00000000    0.00000000    0.00000000    0.00000000 2021.00000000    0.00000000    0.00000000\n [31]   -1.00000000   -1.00000000    2.00000000    2.00000000    0.50000000",
        "    0.08426184    0.41573816   -1.00000000   -1.00000000   -1.00000000\n [41]   -1.00000000    0.00000000    0.00000000    0.00000000   18.00000000    2.00000000 2015.00000000    1.00000000    1.00000000    0.02000000\n [51] 2015.00000000    1.00000000    2.00000000    0.19000000 2015.00000000    1.00000000    3.00000000    1.76000000 2016.00000000    1.00000000\n [61]    1.00000000    0.02000000 2016.00000000    1.00000000    2.00000000    0.20000000 2016.00000000    1.00000000    3.00000000    1.81000000\n [71]",
        " 2017.00000000    1.00000000    1.00000000    1.33900000 2017.00000000    1.00000000    2.00000000    0.18200000 2017.00000000    1.00000000\n [81]    3.00000000    1.15700000 2018.00000000    1.00000000    1.00000000    1.43600000 2018.00000000    1.00000000    2.00000000    0.24200000\n [91] 2018.00000000    1.00000000    3.00000000    1.19400000 2019.00000000    1.00000000    1.00000000    1.43600000 2019.00000000    1.00000000\n[101]    2.00000000    0.24200000 2019.00000000    1.00000000    3.00000000    1.19400000",
        " 2020.00000000    1.00000000    1.00000000    1.43600000\n[111] 2020.00000000    1.00000000    2.00000000    0.24200000 2020.00000000    1.00000000    3.00000000    1.19400000  999.00000000\n",
        "> ",
        "## execute model",
        "> ",
        "    fore2 <- readLines(\"./forecast.ss\")",
        "> ",
        "fore2[grep(\"Fleet_relative_F\"),fore2]",
        "Error in grep(\"Fleet_relative_F\") : \n  argument \"x\" is missing, with no default\n",
        "> ",
        "\n",
        "> ",
        "fore2[grep(\"Fleet_relative_F\",fore2)]",
        "character(0)\n",
        "> ",
        "fore2",
        " [1] \"#C forecast file written by R function SS_writeforecast\"                                                      \n [2] \"#C rerun model to get more complete formatting in forecast.ss_new\"                                            \n [3] \"#C should work with SS version: 3.24\"                                                                         \n [4] \"#C file write time: 2019-06-13 10:42:17\"                                                                      \n [5] \"#\"                                                                                                            ",
        "\n [6] \"1 #_benchmarks\"                                                                                               \n [7] \"2 #_MSY\"                                                                                                      \n [8] \"0.5 #_SPRtarget\"                                                                                              \n [9] \"0.4 #_Btarget\"                                                                                                \n[10] \"#_Bmark_years: beg_bio end_bio beg_selex end_selex beg_alloc end_alloc\"                                       ",
        "\n[11] \"0 0 0 0 0 0\"                                                                                                  \n[12] \"1 #_Bmark_relF_Basis\"                                                                                         \n[13] \"1 #_Forecast\"                                                                                                 \n[14] \"17 #_Nforecastyrs\"                                                                                            \n[15] \"1 #_F_scalar\"                                                                                                 ",
        "\n[16] \"#_Fcast_years:  beg_selex, end_selex, beg_relF, end_relF\"                                                     \n[17] \"0 0 0 0\"                                                                                                      \n[18] \"1 #_ControlRuleMethod\"                                                                                        \n[19] \"0.4 #_BforconstantF\"                                                                                          \n[20] \"0.1 #_BfornoF\"                                                                                                ",
        "\n[21] \"0.857 #_Flimitfraction\"                                                                                       \n[22] \"3 #_N_forecast_loops\"                                                                                         \n[23] \"3 #_First_forecast_loop_with_stochastic_recruitment\"                                                          \n[24] \"0 #_Forecast_loop_control_3\"                                                                                  \n[25] \"0 #_Forecast_loop_control_4\"                                                                                  ",
        "\n[26] \"0 #_Forecast_loop_control_5\"                                                                                  \n[27] \"2021 #_FirstYear_for_caps_and_allocations\"                                                                    \n[28] \"0 #_stddev_of_log_catch_ratio\"                                                                                \n[29] \"0 #_Do_West_Coast_gfish_rebuilder_output\"                                                                     \n[30] \"-1 #_Ydecl\"                                                                                                   ",
        "\n[31] \"-1 #_Yinit\"                                                                                                   \n[32] \"2 #_fleet_relative_F\"                                                                                         \n[33] \"2 #_basis_for_fcast_catch_tuning\"                                                                             \n[34] \"0.5 0.084261838 0.415738162 #_vals_fleet_relative_f\"                                                          \n[35] \"# max totalcatch by fleet (-1 to have no max)\"                                                                ",
        "\n[36] \"-1 -1 -1\"                                                                                                     \n[37] \"# max totalcatch by area (-1 to have no max)\"                                                                 \n[38] \"-1\"                                                                                                           \n[39] \"# fleet assignment to allocation group (enter group ID# for each fleet, 0 for not included in an alloc group)\"\n[40] \"0 0 0\"                                                                                                        ",
        "\n[41] \"18 #_Ncatch\"                                                                                                  \n[42] \"2 #_InputBasis\"                                                                                               \n[43] \" #_Year Seas Fleet Catch_or_F\"                                                                                \n[44] \"   2015    1     1      0.020\"                                                                                \n[45] \"   2015    1     2      0.190\"                                                                                ",
        "\n[46] \"   2015    1     3      1.760\"                                                                                \n[47] \"   2016    1     1      0.020\"                                                                                \n[48] \"   2016    1     2      0.200\"                                                                                \n[49] \"   2016    1     3      1.810\"                                                                                \n[50] \"   2017    1     1      1.339\"                                                                                ",
        "\n[51] \"   2017    1     2      0.182\"                                                                                \n[52] \"   2017    1     3      1.157\"                                                                                \n[53] \"   2018    1     1      1.436\"                                                                                \n[54] \"   2018    1     2      0.242\"                                                                                \n[55] \"   2018    1     3      1.194\"                                                                                ",
        "\n[56] \"   2019    1     1      1.436\"                                                                                \n[57] \"   2019    1     2      0.242\"                                                                                \n[58] \"   2019    1     3      1.194\"                                                                                \n[59] \"   2020    1     1      1.436\"                                                                                \n[60] \"   2020    1     2      0.242\"                                                                                ",
        "\n[61] \"   2020    1     3      1.194\"                                                                                \n[62] \"#\"                                                                                                            \n[63] \"999 # verify end of input \"                                                                                   \n",
        "> ",
        "fore2[grep(\"#_Fleet_relative_F\",fore2)]",
        "character(0)\n",
        "> ",
        "fore2[grep(\" #_Fleet_relative_F\",fore2)]",
        "character(0)\n",
        "> ",
        "fore2[32]",
        "[1] \"2 #_fleet_relative_F\"\n",
        "> ",
        "getwd()",
        "[1] \"C:/Users/mkapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth/forecasts/forecast2021\"\n",
        "> ",
        "if(t < 10){",
        "+ ",
        "      ## manual re-write so the SS_read funcs will work",
        "+ ",
        "      fore2 <- readLines(\"./forecast.ss\")",
        "+ ",
        "      fore2[32] <- \"1 #_fleet_relative_F\"",
        "+ ",
        "    }",
        "> ",
        "writeLines(fore2,\"./forecast.ss\")",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    nseas = 1,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in array(data = allocation_among_groups, dim = c(mylist$N_allocation_groups,  : \n  negative length vectors are not allowed\n",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in SS_readforecast(file = \"./forecast.ss\", Nareas = replist0$nareas,  : \n  argument \"nseas\" is missing, with no default\n",
        "> ",
        "require(r4ss)",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in SS_readforecast(file = \"./forecast.ss\", Nareas = replist0$nareas,  : \n  argument \"nseas\" is missing, with no default\n",
        "> ",
        "rm(SS_readforecast())",
        "Error in rm(SS_readforecast()) : \n  ... must contain names or character strings\n",
        "> ",
        "rm(SS_readforecast)",
        "> ",
        "require(r4ss)",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in SS_readforecast(file = \"./forecast.ss\", Nareas = replist0$nareas,  : \n  argument \"nseas\" is missing, with no default\n",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    nseas = replist0$nseasons,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in array(data = allocation_among_groups, dim = c(mylist$N_allocation_groups,  : \n  negative length vectors are not allowed\n",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    nseas = replist0$nseasons,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = F)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in array(data = allocation_among_groups, dim = c(mylist$N_allocation_groups,  : \n  negative length vectors are not allowed\n",
        "\nRestarting R session...\n\n",
        "> ",
        "require(r4ss)",
        "Loading required package: r4ss\n",
        "> ",
        "getwd",
        "function () \n.Internal(getwd())\n<bytecode: 0x000000000b471158>\n<environment: namespace:base>\n",
        "> ",
        "()",
        "Error: unexpected ')' in \"()\"\n",
        "> ",
        "getwd()",
        "[1] \"C:/Users/mkapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth/forecasts/forecast2021\"\n",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    nseas = replist0$nseasons,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "Error in paste(replist0$SS_versionNumeric) : object 'replist0' not found\n",
        "> ",
        "replist0 <- SS_output(paste0(rootdir,\"/\",basedir))",
        "Error in paste0(rootdir, \"/\", basedir) : object 'rootdir' not found\n",
        "> ",
        "catch_projections <- read.csv(paste0(rootdir.temp,\"/cproj_\",r,\".csv\"))",
        "Error in paste0(rootdir.temp, \"/cproj_\", r, \".csv\") : \n  object 'rootdir.temp' not found\n",
        "> ",
        "rootdir = rootdir.temp;",
        "Error: object 'rootdir.temp' not found\n",
        "> ",
        "                           basedir = \"base2015\";",
        "> ",
        "                           catch_proportions = catch_projections[5,5:ncol(catch_projections)];",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "                           # catch_proportions = c(0.5,0.08426184,0.4157382),",
        "> ",
        "                           forecast_start = 2021;",
        "> ",
        "                           forecast_end = 2031;",
        "> ",
        "                           fixed_catches = catch_projections[1:4,5:ncol(catch_projections)];",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "                           Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "catch_projections <- read.csv(paste0(rootdir.temp,\"/cproj_\",r,\".csv\"));",
        "Error in paste0(rootdir.temp, \"/cproj_\", r, \".csv\") : \n  object 'rootdir.temp' not found\n",
        "> ",
        "rootdir = rootdir.temp;",
        "Error: object 'rootdir.temp' not found\n",
        "> ",
        "                           basedir = \"base2015\";",
        "> ",
        "                           catch_proportions = catch_projections[5,5:ncol(catch_projections)];",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "                           # catch_proportions = c(0.5,0.08426184,0.4157382),",
        "> ",
        "                           forecast_start = 2021;",
        "> ",
        "                           forecast_end = 2031;",
        "> ",
        "                           fixed_catches = catch_projections[1:4,5:ncol(catch_projections)];",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "                           Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "r = 'North'",
        "> ",
        "catch_projections <- read.csv(paste0(rootdir.temp,\"/cproj_\",r,\".csv\"))",
        "Error in paste0(rootdir.temp, \"/cproj_\", r, \".csv\") : \n  object 'rootdir.temp' not found\n",
        "> ",
        "kaputils:::SS_autoForecast(rootdir = rootdir.temp,",
        "+ ",
        "                           basedir = \"base2015\",",
        "+ ",
        "                           catch_proportions = catch_projections[5,5:ncol(catch_projections)],",
        "+ ",
        "                           # catch_proportions = c(0.5,0.08426184,0.4157382),",
        "+ ",
        "                           forecast_start = 2021,",
        "+ ",
        "                           forecast_end = 2031,",
        "+ ",
        "                           fixed_catches = catch_projections[1:4,5:ncol(catch_projections)],",
        "+ ",
        "                           Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]",
        "+ ",
        "\n",
        "> ",
        "\n",
        "> ",
        "\n",
        "> ",
        "catch_projections <- read.csv(paste0(rootdir.temp,\"/cproj_\",r,\".csv\"));",
        "Error in paste0(rootdir.temp, \"/cproj_\", r, \".csv\") : \n  object 'rootdir.temp' not found\n",
        "> ",
        "rootdir = rootdir.temp;",
        "Error: object 'rootdir.temp' not found\n",
        "> ",
        "                           basedir = \"base2015\";",
        "> ",
        "                           catch_proportions = catch_projections[5,5:ncol(catch_projections)];",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "                           # catch_proportions = c(0.5,0.08426184,0.4157382),",
        "> ",
        "                           forecast_start = 2021;",
        "> ",
        "                           forecast_end = 2031;",
        "> ",
        "                           fixed_catches = catch_projections[1:4,5:ncol(catch_projections)];",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "                           Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]",
        "Error: object 'catch_projections' not found\n",
        "> ",
        "rootdir = rootdir.temp",
        "Error: object 'rootdir.temp' not found\n",
        "> ",
        "rootdir.temp <- paste0(\"C:/Users/\",compname,\"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr\",r)",
        "Error in paste0(\"C:/Users/\", compname, \"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr\",  : \n  object 'compname' not found\n",
        "> ",
        "",
        "> ",
        "compname = 'mkapur'",
        "> ",
        "rootdir.temp <- paste0(\"C:/Users/\",compname,\"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr\",r)",
        "> ",
        "",
        "> ",
        "catch_projections <- read.csv(paste0(rootdir.temp,\"/cproj_\",r,\".csv\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "rootdir = rootdir.temp,",
        "Error: unexpected ',' in \"rootdir = rootdir.temp,\"\n",
        "> ",
        "basedir = \"base2015\",",
        "Error: unexpected ',' in \"basedir = \"base2015\",\"\n",
        "> ",
        "catch_proportions = catch_projections[5,5:ncol(catch_projections)],",
        "Error: unexpected ',' in \"catch_proportions = catch_projections[5,5:ncol(catch_projections)],\"\n",
        "> ",
        "# catch_proportions = c(0.5,0.08426184,0.4157382),",
        "> ",
        "forecast_start = 2021,",
        "Error: unexpected ',' in \"forecast_start = 2021,\"\n",
        "> ",
        "forecast_end = 2031,",
        "Error: unexpected ',' in \"forecast_end = 2031,\"\n",
        "> ",
        "fixed_catches = catch_projections[1:4,5:ncol(catch_projections)],",
        "Error: unexpected ',' in \"fixed_catches = catch_projections[1:4,5:ncol(catch_projections)],\"\n",
        "> ",
        "Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]",
        "> ",
        "rootdir = rootdir.temp;",
        "> ",
        "basedir = \"base2015\";",
        "> ",
        "catch_proportions = catch_projections[5,5:ncol(catch_projections)];",
        "> ",
        "# catch_proportions = c(0.5,0.08426184,0.4157382),",
        "> ",
        "forecast_start = 2021;",
        "> ",
        "forecast_end = 2031;",
        "> ",
        "fixed_catches = catch_projections[1:4,5:ncol(catch_projections)];",
        "> ",
        "Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020]",
        "> ",
        "replist0 <- SS_output(paste0(rootdir,\"/\",basedir))",
        "Getting header info from:\n   C:/Users/mkapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth/base2015/Report.sso \n",
        "Note: this function tested on SS versions 3.24 and 3.30.\n  You are using SS-V3.24U which SHOULD work with this R code.\n\n",
        "Report file time: Tue May 07 10:54:48 2019 \nReading full report file\nGot all columns. To speed code, use ncols=93 in the future.\nGot Report file\nGot Forecast-report file\nSetting minimum biomass threshhold to 0.25\n   based on US west coast assumption associated with biomass target of 0.4.\n   (can replace or override in SS_plots by setting 'minbthresh')\nGot log file. There were NO temporary files were written in this run.\nGot warning file.\n  There were 0 warnings in C:/Users/mkapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth/base2015/warning.sso",
        " \nFinished reading files\nCompReport file separated by this code as follows (rows = Ncomps*Nbins):\n    570 rows of length comp data,\n    0 rows of generalized size comp data,\n    0 rows of age comp data,\n    4982 rows of conditional age-at-length data,\n    799 rows of ghost fleet age comp data,\n    0 rows of ghost fleet conditional age-at-length data,\n    0 rows of ghost fleet length comp data,\n    0 rows of mean length at age data,\n    0 rows of mean weight at age data,\n    0 rows of 'TAG1' comp data, and\n ",
        "   0 rows of 'TAG2' comp data.\nFinished dimensioning\nGot covar file.\n",
        "Finished primary run statistics list\n",
        "Statistics shown below (to turn off, change input to printstats=FALSE)\n$`SS_version`\n[1] \"SS-V3.24U-safe;_08/29/2014;_Stock_Synthesis_by_Richard_Methot_(NOAA)_using_ADMB_11.2_Win64\"\n\n$SS_versionshort\n[1] \"SS-V3.24\"\n\n$SS_versionNumeric\n[1] 3.24\n\n$StartTime\n[1] \"StartTime: Tue May 07 10:54:48 2019\"\n\n$RunTime\n[1] \"0 hours, 4 minutes, 34 seconds.\"\n\n$Files_used\n[1] \"Data_File: china_WAonly_data.ss Control_File: china_WAonly_control.ss\"\n\n$Nwarnings\n[1] 0\n\n$warnings\n[1] \"SS-V3.24U-safe;_08/29/2014;_Stock_Synthesis_by_Richard_Methot_(NOAA)_using_ADMB_11.2_Win64\"",
        "\n[2] \"Tue May 07 10:54:48 2019\"                                                                  \n[3] \"\"                                                                                          \n[4] \" N warnings: 0\"                                                                            \n[5] \"Number_of_active_parameters_on_or_near_bounds: 0\"                                          \n\n$likelihoods_used\n                                 values lambdas\nTOTAL                314.49000000000001      NA\nCatch               ",
        "   0.00000000604564      NA\nEquil_catch            0.00000000000000       1\nSurvey               -37.13660000000000      NA\nLength_comp           47.58150000000000      NA\nAge_comp             298.33600000000001      NA\nRecruitment            0.00000000000000       1\nForecast_Recruitment   0.00000000000000       1\nParm_priors            5.70724000000000       1\nParm_softbounds        0.00153109000000      NA\nParm_devs              0.00000000000000       1\nCrash_Pen              0.00000000000000       1\n\n$likelihoods_by_fleet\n",
        "            Label          ALL 1_WA_SouthernWA_Rec_PCPR\n102  Catch_lambda           NA              1.00000e+00\n103    Catch_like  6.04564e-09              1.63693e-09\n104   Surv_lambda           NA              0.00000e+00\n105     Surv_like -3.71366e+01              0.00000e+00\n106 Length_lambda           NA              1.00000e+00\n107   Length_like  4.75815e+01              2.13757e+01\n108    Age_lambda           NA              1.00000e+00\n109      Age_like  2.98336e+02              0.00000e+00\n    2_WA_NorthernWA_Rec_PC",
        " 3_WA_NorthernWA_Rec_PR\n102            1.00000e+00            1.00000e+00\n103            2.20436e-09            2.20436e-09\n104            0.00000e+00            1.00000e+00\n105            0.00000e+00           -3.71366e+01\n106            0.00000e+00            1.00000e+00\n107            0.00000e+00            2.62058e+01\n108            0.00000e+00            1.00000e+00\n109            0.00000e+00            2.98336e+02\n\n$Parm_devs_detail\n[1] NA\n\n$N_estimated_parameters\n[1] 8\n\n$table_of_phases\n\n-99  -9  -6 ",
        " -4  -3  -2  -1   1   2   4   5   6 \n  1   8   1   8  15   2   3   1   1   1   2   3 \n\n$estimated_non_dev_parameters\n                                           Value Phase   Min   Max\nL_at_Amax_Fem_GP_1                    35.4110000     6 20.00 50.00\nVonBert_K_Fem_GP_1                     0.1466260     6  0.01  0.30\nCV_old_Fem_GP_1                        0.0797019     6  0.01  0.25\nSR_LN(R0)                              3.5308500     1  2.00 12.00\nQ_extraSD_3_3_WA_NorthernWA_Rec_PR     0.1261630     2  0.00",
        "  2.00\nSizeSel_1P_3_1_WA_SouthernWA_Rec_PCPR  3.9702300     5  0.00  9.00\nSizeSel_2P_1_2_WA_NorthernWA_Rec_PC   34.8616000     4 19.00 36.00\nSizeSel_2P_3_2_WA_NorthernWA_Rec_PC    2.9245800     5  0.00  9.00\n                                       Init Status Parm_StDev  Pr_type\nL_at_Amax_Fem_GP_1                    34.00     OK 0.36410900   Normal\nVonBert_K_Fem_GP_1                     0.10     OK 0.00638977   Normal\nCV_old_Fem_GP_1                        0.10     OK 0.00676801 No_prior\nSR_LN(R0)                            ",
        "  2.70     OK 0.17694700 No_prior\nQ_extraSD_3_3_WA_NorthernWA_Rec_PR     0.15     OK 0.02384310 No_prior\nSizeSel_1P_3_1_WA_SouthernWA_Rec_PCPR  3.00     OK 0.36445100 No_prior\nSizeSel_2P_1_2_WA_NorthernWA_Rec_PC   34.00     OK 1.00083000 No_prior\nSizeSel_2P_3_2_WA_NorthernWA_Rec_PC    3.00     OK 0.34747000 No_prior\n                                      Prior Pr_SD    Pr_Like Afterbound\nL_at_Amax_Fem_GP_1                     34.0  10.0 0.00995490         OK\nVonBert_K_Fem_GP_1                      0.1   0.8 0.00169844",
        "         OK\nCV_old_Fem_GP_1                          NA    NA         NA         OK\nSR_LN(R0)                                NA    NA         NA         OK\nQ_extraSD_3_3_WA_NorthernWA_Rec_PR       NA    NA         NA         OK\nSizeSel_1P_3_1_WA_SouthernWA_Rec_PCPR    NA    NA         NA         OK\nSizeSel_2P_1_2_WA_NorthernWA_Rec_PC      NA    NA         NA         OK\nSizeSel_2P_3_2_WA_NorthernWA_Rec_PC      NA    NA         NA         OK\n\n$log_det_hessian\n[1] 40.5332\n\n$maximum_gradient_component\n[1] 7.04398e-05",
        "\n\n$Length_comp_Eff_N_tuning_check\n                    FleetName Fleet mean_effN mean(inputN*Adj)\n2185 1_WA_SouthernWA_Rec_PCPR     1   14.8405          3.58143\n2187   3_WA_NorthernWA_Rec_PR     3   54.1874          9.78521\n     HarMean(effN) Mean(effN/inputN) MeaneffN/MeaninputN Var_Adj\n2185       11.2667           4.93819             4.14375   0.189\n2187       11.1465           6.19610             5.53769   0.089\n     HarMean/MeanInputN\n2185           3.145866\n2187           1.139117\n\n$Age_comp_Eff_N_tuning_check\n",
        "     Fleet   N Npos mean(inputN*Adj) HarMean(effN) Curr_Var_Adj\n2314     1   1    0          0.00000        0.0000       1.0000\n2316     3 122  106          3.38677        3.1676       0.2428\n     HarMean(effN)/mean(inputN*Adj) Recommend_Var_Adj\n2314                            NaN               NaN\n2316                      0.9352864         0.2270875\n                   Fleet_name\n2314 1_WA_SouthernWA_Rec_PCPR\n2316   3_WA_NorthernWA_Rec_PR\n\n$SBzero\n[1] 24.4413\n\n$current_depletion\n[1] 0.7344004\n\n$last_years_SPR\n",
        "[1] 0.520898\n\n$SPRratioLabel\n[1] \"(1-SPR)/(1-SPR_50%)\"\n\n$sigma_R_in\n[1] 0.5\n\n$sigma_R_info\n           period N_devs SD_of_devs Var_of_devs mean_SE mean_SEsquared\n1            Main      0         NA          NA     NaN            NaN\n2      Early+Main      0         NA          NA     NaN            NaN\n3 Early+Main+Late     13          0           0      NA             NA\n  sqrt_sum_of_components SD_of_devs_over_sigma_R sqrt_sum_over_sigma_R\n1                     NA                      NA                    NA",
        "\n2                     NA                      NA                    NA\n3                     NA                       0                    NA\n  alternative_sigma_R\n1                  NA\n2                  NA\n3                  NA\n\n$rmse_table\n       ERA  N RMSE RMSE_over_sigmaR mean_BiasAdj\n1947  main 31    0                0            0\n1948 early  0    0                0            0\n\n$`cormessage1`\n[1] Range of abs(parameter correlations) is 0.000386351 to 0.899423\n\n$cormessage2\n[1] No correlations above threshold (cormax=0.95)",
        "\n\n$cormessage7\n[1] 1 uncorrelation below threshold (cormin=0.01)\n\n$cormessage8\n                                name         max\n1 Q_extraSD_3_3_WA_NorthernWA_Rec_PR 0.000906079\n\ncompleted SS_output\n",
        "> ",
        "getwd()",
        "[1] \"C:/Users/mkapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth/forecasts/forecast2021\"\n",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    nseas = replist0$nseasons,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in array(data = allocation_among_groups, dim = c(mylist$N_allocation_groups,  : \n  negative length vectors are not allowed\n",
        "> ",
        "install_github(\"r4ss/r4ss/@1cfdf6a17038ff3ed672eaf54c6dc3e96712a034\")",
        "Error in install_github(\"r4ss/r4ss/@1cfdf6a17038ff3ed672eaf54c6dc3e96712a034\") : \n  could not find function \"install_github\"\n",
        "> ",
        "devtools::install_github(\"r4ss/r4ss/@1cfdf6a17038ff3ed672eaf54c6dc3e96712a034\")",
        "Error in parse_repo_spec(repo) : \n  Invalid git repo specification: 'r4ss/r4ss/@1cfdf6a17038ff3ed672eaf54c6dc3e96712a034'\n",
        "> ",
        "devtools::install_github(\"r4ss/r4ss/@1cfdf6a\")",
        "Error in parse_repo_spec(repo) : \n  Invalid git repo specification: 'r4ss/r4ss/@1cfdf6a'\n",
        "> ",
        "devtools::install_github(\"r4ss/r4ss@1cfdf6a\")",
        "Downloading GitHub repo r4ss/r4ss@1cfdf6a\n",
        "These packages have more recent versions available.\nWhich would you like to update?\n\n 1:   All                                                  2:   CRAN packages only                                   3:   None                                              \n 4:   backports  (1.1.2        -> 1.1.4       ) [CRAN]     5:   caTools    (1.17.1.1     -> 1.17.1.2    ) [CRAN]     6:   colorspace (1.4-0        -> 1.4-1       ) [CRAN]  \n 7:   digest     (0.6.18       -> 0.6.19      ) [CRAN]     8:   evaluate   (0.11         -> 0.14        ) [CRAN]     9:   highr      (0.7          -> 0.8         ) [CRAN]  \n10:   httr       (1.3.1        -> 1.4.0       ) [CRAN]    11:   knitr      (1.22         -> 1.23        ) [CRAN]    12:   markdown   (0.8          -> 1.0         ) [CRAN]  \n13:   mime       (0.5          -> 0.7         ) [CRAN]    14:   openssl    (1.0.2        -> 1.4         ) [CRAN]    15:   pillar     (1.3.1        -> 1.4.1       ) [CRAN]  \n16:   readr      (1.1.1        -> 1.3.1       ) [CRAN]    17:   rstudioapi (0.7          -> 0.10        ) [CRAN]    18:   rvest      (0.3.2        -> 0.3.4       ) [CRAN]  \n19:   stringi    (1.2.4        -> 1.4.3       ) [CRAN]    20:   stringr    (1.3.1        -> 1.4.0       ) [CRAN]    21:   tibble     (2.1.1        -> 2.1.3       ) [CRAN]  \n22:   tinytex    (660b5f06c... -> cfc729ced...) [GitHub]  23:   xfun       (0.4          -> 0.7         ) [CRAN]    ",
        "\nEnter one or more numbers separated by spaces, or an empty line to cancel\n",
        "1: ",
        "3",
        "Installing 2 packages: askpass, sys\n",
        "Installing packages into ‘C:/Users/mkapur/Documents/R/win-library/3.5’\n(as ‘lib’ is unspecified)\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/askpass_1.1.zip'\n",
        "Content type 'application/zip'",
        " length 64362 bytes (62 KB)\n",
        "downloaded 62 KB\n\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.5/sys_3.2.zip'\n",
        "Content type 'application/zip'",
        " length 59423 bytes (58 KB)\n",
        "downloaded 58 KB\n\n",
        "package ‘askpass’ successfully unpacked and MD5 sums checked\npackage ‘sys’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\mkapur\\AppData\\Local\\Temp\\Rtmp63RUVt\\downloaded_packages\n  \r  \r  \r   checking for file 'C:\\Users\\mkapur\\AppData\\Local\\Temp\\Rtmp63RUVt\\remotes475867f95be7\\r4ss-r4ss-1cfdf6a/DESCRIPTION' ...\r  \r[32m√[39m  [38;5;247mchecking for file 'C:\\Users\\mkapur\\AppData\\Local\\Temp\\Rtmp63RUVt\\remotes475867f95be7\\r4ss-r4ss-1cfdf6a/DESCRIPTION'[39m[36m[36m (675ms)[36m[39m",
        "\n\r  \r  \r  \r[38;5;247m-[39m[38;5;247m  [39m[38;5;247mpreparing 'r4ss':[39m[36m[36m (398ms)[36m[39m\n   checking DESCRIPTION meta-information ...\r  \r   checking DESCRIPTION meta-information ... \r  \r[32m√[39m  [38;5;247mchecking DESCRIPTION meta-information[39m[36m[39m\n\r  \r  \r  \r[38;5;247m-[39m[38;5;247m  [39m[38;5;247mchecking for LF line-endings in source and make files and shell scripts[39m[36m[39m\n\r  \r  \r  \r[38;5;247m-[39m[38;5;247m  [39m[38;5;247mchecking for empty or unneeded directories[39m[36m[39m",
        "\n\r  \r  \r  \r[38;5;247m-[39m[38;5;247m  [39m[38;5;247mbuilding 'r4ss_1.35.1.tar.gz'[39m[36m[39m\n\r  \r   \n\r",
        "Installing package into ‘C:/Users/mkapur/Documents/R/win-library/3.5’\n(as ‘lib’ is unspecified)\n",
        "* installing *source* package 'r4ss' ...\n** R\n** inst\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n  converting help for package 'r4ss'\n    finding HTML links ... done\n    DoProjectPlots                          html  \n    NegLogInt_Fn                            html  \n    PinerPlot                               html  \n    SSMethod.Cond.TA1.8                     html  \n    SSMethod.TA1.8                          html  \n    SS_ForeCatch                            html  \n",
        "    SS_RunJitter                            html  \n    SS_changepars                           html  \n    SS_doRetro                              html  \n    SS_fitbiasramp                          html  \n    SS_html                                 html  \n    SS_makeHTMLdiagnostictable              html  \n    SS_makedatlist                          html  \n    SS_output                               html  \n    SS_parlines                             html  \n    SS_plots                                html  \n    SS_profile                              html  \n",
        "    SS_read_summary                         html  \n    SS_readctl                              html  \n    SS_readctl_3.24                         html  \n    SS_readctl_3.30                         html  \n    SS_readdat                              html  \n    SS_readdat_2.00                         html  \n    SS_readdat_3.00                         html  \n    SS_readdat_3.24                         html  \n    SS_readdat_3.30                         html  \n    SS_readforecast                         html  \n    SS_readstarter                          html  \n",
        "    SS_recdevs                              html  \n    SS_splitdat                             html  \n    SS_tune_comps                           html  \n    SS_varadjust                            html  \n    SS_writectl_3.24                        html  \n    SS_writedat                             html  \n    SS_writedat_3.24                        html  \n    SS_writedat_3.30                        html  \n    SS_writeforecast                        html  \n    SS_writestarter                         html  \n    SSbiologytables                         html  \n",
        "    SSbootstrap                             html  \n    SSexecutivesummary                      html  \n    SSgetMCMC                               html  \n    SSgetoutput                             html  \n    SSmakeMmatrix                           html  \n    SSmohnsrho                              html  \n    SSplotAgeMatrix                         html  \n    SSplotBiology                           html  \n    SSplotCatch                             html  \n    SSplotCohortCatch                       html  \n    SSplotComparisons                       html  \n",
        "    SSplotComps                             html  \n    SSplotData                              html  \n    SSplotDiscard                           html  \n    SSplotIndices                           html  \n    SSplotMCMC_ExtraSelex                   html  \n    SSplotMnwt                              html  \n    SSplotMovementMap                       html  \n    SSplotMovementRates                     html  \n    SSplotNumbers                           html  \n    SSplotPars                              html  \n    SSplotProfile                           html  \n",
        "    SSplotRecdevs                           html  \n    SSplotRecdist                           html  \n    SSplotRetroRecruits                     html  \n    SSplotSPR                               html  \n    SSplotSelex                             html  \n    SSplotSexRatio                          html  \n    SSplotSpawnrecruit                      html  \n    SSplotSummaryF                          html  \n    SSplotTags                              html  \n    SSplotTimeseries                        html  \n    SSplotYield                             html  \n",
        "    SSsummarize                             html  \n    SStableComparisons                      html  \n    SStimeseries                            html  \n    SSunavailableSpawningOutput             html  \n    TSCplot                                 html  \n    bubble3                                 html  \n    getADMBHessian                          html  \n    make_multifig                           html  \n    make_multifig_sexratio                  html  \n    mcmc.nuisance                           html  \n    mcmc.out                                html  \n",
        "    mountains                               html  \n    plotCI                                  html  \n    r4ss-package                            html  \n    r4ss_logo                               html  \n    read.admbFit                            html  \n    rich.colors.short                       html  \n    selShapes                               html  \n    stackpoly                               html  \n** building package indices\n** installing vignettes\n** testing if installed package can be loaded\n*** arch - i386\n",
        "*** arch - x64\n* DONE (r4ss)\nIn R CMD INSTALL\n",
        "> ",
        "require(r4ss)",
        "> ",
        "fore <-  SS_readforecast(file = './forecast.ss',",
        "+ ",
        "                    Nareas = replist0$nareas,",
        "+ ",
        "                    Nfleets = replist0$nfishfleets,",
        "+ ",
        "                    nseas = replist0$nseasons,",
        "+ ",
        "                    version = paste(replist0$SS_versionNumeric),",
        "+ ",
        "                    readAll = TRUE)",
        "running SS_readforecast\nBenchmark years:  0 0 0 0 0 0 \nForecast = 1 \nForecast years:  0 0 0 0 \nreading section on fleet- and area-specific inputs based on 3.24 format\n  max_totalcatch_by_fleet = 0.5 0.08426184 0.4157382 \n  max_totalcatch_by_area = -1 \n  fleet_assignment_to_allocation_group = -1 -1 -1 \n",
        "Error in array(data = allocation_among_groups, dim = c(mylist$N_allocation_groups,  : \n  negative length vectors are not allowed\n",
        "> ",
        "#' SS_autoForecast",
        "> ",
        "#' beta version of tool to automate catch-only update iterations and development of decision tables",
        "> ",
        "#' hopefully port to r4ss when ready",
        "> ",
        "#' @param rootdir  somewhere you'd like several models in folders created",
        "> ",
        "#' @param basedir directory with executed base-case model",
        "> ",
        "#' @param catch_proportions  a single or vector of values denoting the allocation proportiosn for each fleet in order matching .dat file; assuming F_relative opt 2",
        "> ",
        "#' @param forecast_start the first year to forecast; assume inputs before this",
        "> ",
        "#' @param forecast_end last year to forecast",
        "> ",
        "#' @param fixed_catches a matrix of input fixed catches from the end of the original model to forecast_start",
        "> ",
        "#' @param Flimitfraction a value or fector of same length as forecast period with P* values corresponding to a given year",
        "> ",
        "devtools::install_github(\"r4ss/r4ss@2663227\")",
        "Downloading GitHub repo r4ss/r4ss@2663227\n",
        "\n",
        "Warning message:\n",
        "In system(cmd, intern = TRUE) :",
        "\n ",
        " running command 'tar.exe -ztf \"C:\\Users\\mkapur\\AppData\\Local\\Temp\\Rtmp63RUVt\\file47581ca43e47.tar.gz\"' had status 99\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        0,
        3,
        0,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ]
}