values_from = value
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(variable, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol)
refList <-  mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(is.na(.$Yr)) %>%
# mutate(Label2 = gsub("_.*", "", Label) ,
#        idcol  = paste0(variable, Label)) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(variable, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -variable)
head(refList)
str_sub(variable, 6, -5)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(is.na(.$Yr)) %>%
# mutate(Label2 = gsub("_.*", "", Label) ,
#        idcol  = paste0(variable, Label)) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = value
)
str_sub("OMREP10", 6, 0)
str_sub("OMREP10", 6, -1)
str_sub("OMREP1", 6, -1)
refList <-  mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(is.na(.$Yr)) %>%
# mutate(Label2 = gsub("_.*", "", Label) ,
#        idcol  = paste0(variable, Label)) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(variable, 6, -1))
) %>%
select(Yr, MOD, REP, IDX, everything(), -variable)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = 'MOD', by.y = 'variable')
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = 'MOD', by.y = 'REP')
head(refList)
unique(refList$Rep)
unique(refList$REP)
tt <-   mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol)
unique(tt$REP)
class(tt$REP)
class(refList$REP)
unique(tt$REP)
tt$REP == reflist$REP
tt$REP == refList$REP
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('MOD'), by.y = 'REP')
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('MOD'), by.y = c('REP'), all.y = FALSE)
refList <-  mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(is.na(.$Yr)) %>%
# mutate(Label2 = gsub("_.*", "", Label) ,
#        idcol  = paste0(variable, Label)) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(variable, 6, -1))
) %>%
select(-Yr, -MOD, REP, -IDX, everything(), -variable)
refList
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('MOD'), by.y = c('REP'), all.y = FALSE)
head(tt)
head(refList)
reflist$REP
refList$REP
refList <-  mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(is.na(.$Yr)) %>%
# mutate(Label2 = gsub("_.*", "", Label) ,
#        idcol  = paste0(variable, Label)) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(variable, 6, -1))
) %>%
select(-Yr, -MOD, REP, -IDX, everything(), -variable)
View(refList)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('REP'), by.y = c('REP'), all.y = FALSE)
refList <-  mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(is.na(.$Yr)) %>%
# mutate(Label2 = gsub("_.*", "", Label) ,
#        idcol  = paste0(variable, Label)) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(variable, 6, -1))
) %>%
select(-Yr, -MOD, REP, -IDX, everything(), -variable)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('REP'), by.y = c('REP'), all.y = FALSE)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('REP'), by.y = c('REP'), all.y = FALSE)
select(-Yr.y, Yr.x, IDX.y, IDX.x, MOD.y, MOD.x)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('REP'), by.y = c('REP'), all.y = FALSE) %>%
mutate(Yr = Yr.x, MOD = suff, IDX = NA) %>%
select(-Yr.y, Yr.x, IDX.y, IDX.x, MOD.y, MOD.x)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('REP'), by.y = c('REP'), all.y = FALSE) %>%
mutate(Yr = Yr.x, MOD = suff, IDX = NA) %>%
select(-Yr.y, -Yr.x, -IDX.y, -IDX.x, -MOD.y, -MOD.x)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = paste0(suff,str_sub(idcol, 6, -5))
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol) %>%
merge(., refList, by.x = c('REP'), by.y = c('REP'), all.y = FALSE) %>%
mutate(Yr = Yr.x, MOD = suff, IDX = NA) %>%
select(-Yr.y, -Yr.x, -IDX.y, -IDX.x, -MOD.y, -MOD.x) %>%
select(Yr, MOD, IDX, REP, everything())
devtools::load_all(".")
devtools::load_all(".")
devtools::document(.)
devtools::document()
devtools::use_build_ignore('plotSRR_panel.R
')
require(devtools)
?use_build_ignore
devtools::use_build_ignore('plotSRR_panel.R
')
use_build_ignore('plotSRR_panel.R
')
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/R/plotSRR_panel.R')
document()
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/man/plotSRR_panel.Rmd')
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/man/plotSRR_panel.md')
document()
document()
document()
document()
document()
document()
document()
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/man/plotSRR.Rmd')
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/man/plotSRR.Rd')
document()
devtools::load_all(".")
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/.Rhistory.Rd')
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/.Rhistory')
use_build_ignore('C:/Users/mkapur/Dropbox/kaputils/.gitignore')
devtools::check()
document
document()
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/";
suff = NA;
terminal_year = 2012;
pattern = "OM";
subpattern = NA;
writeTables = FALSE
suff <- ifelse(is.na(suffix), ifelse(is.na(subpattern), pattern, subpattern), suffix)
suffix = NA
## iterate avail. runs
if (!is.na(pattern)) {
mods <- list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
}  else{
mods <- rootdir
}
## iterate avail. runs
if (!is.na(pattern)) {
mods <- list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
}  else{
mods <- rootdir
}
mods
mods
list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
pattern = 'retro-'
## iterate avail. runs
if (!is.na(pattern)) {
mods <- list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
}  else{
mods <- rootdir
}
mods
!is.na(pattern) & is.na(subpattern)
mtemp <- lapply(mods, SS_output) %>%
SSsummarize()
rootdir =   "C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-03/";
terminal_year = 2016;
suffix = "EM";
pattern = "OM";
subpattern = "*SpaceLast";
devtools::load_all(".")
suff <- ifelse(is.na(suffix), ifelse(is.na(subpattern), pattern, subpattern), suffix)
## iterate avail. runs
if (!is.na(pattern)) {
mods <- list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
}  else{
mods <- rootdir
}
mods
subpattern= '*SpaceFirst'
if (!is.na(pattern)) {
mods <- list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
}  else{
mods <- rootdir
}
mods
pattern
!is.na(pattern) & is.na(subpattern)
mtemp <- lapply(mods, SS_output) %>%
SSsummarize()
!is.na(subpattern)
m = 1
## loop into master file
modname <- sub('.*\\/', '', mods)[m]
modname
mods[m] %>%
list.dirs(., recursive = T) %>%
.[grepl(subpattern, .)] %>%
.[!grepl("plots", .)]
m = 10
mods[m] %>%
list.dirs(., recursive = T) %>%
.[grepl(subpattern, .)] %>%
.[!grepl("plots", .)]
mods
m = 2
mods[m] %>%
list.dirs(., recursive = T) %>%
.[grepl(subpattern, .)] %>%
.[!grepl("plots", .)]
length(list.dirs(subdirs[s], recursive = F)) > 0
## use SS_output function to extract quantities
subdirs <- mods[m] %>%
list.dirs(., recursive = T) %>%
.[grepl(subpattern, .)] %>%
.[!grepl("plots", .)]
length(list.dirs(subdirs[s], recursive = F)) > 0
s = ``
s = 1
length(list.dirs(subdirs[s], recursive = F)) > 0
rlang::is_empty(subdirs)
