mutate(Label2 = gsub("_.*", "", Label)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = Yr,
values_from = Value
) %>%
mutate('MOD' = suff,
"IDX" = IDX,
"REP" = splitpath) %>%
select(Yr, MOD, REP, IDX, everything())
## write and/or append SPRSeries
if (writeTables == T) {
# SPRseries <- data.frame(mtemp$sprseries,
#                        "B.Bmsy" = mtemp$Kobe$B.Bmsy,
#                        "F.Fmsy" = mtemp$Kobe$F.Fmsy,
#                        "rep" =  splitpath,
#                        "MOD" = modname,
#                        'IDX' = IDX)
#
#
# derivedquants <- mtemp$derived_quants %>%
#   select(Label,Value,StdDev) %>%
#   mutate(Year = sub("^[^_]*_", "", Label),
#          Quant = gsub( "_.*", "", Label),
#          MOD = modname)
#
# if(FleetName != 'All'){
#   cpue.df <- mtemp$cpue %>% filter(Name %in% FleetName)
# } else
#   cpue.df <- mtemp$cpue
#
# cpue <- data.frame(cpue.df,
#                   "rep" = splitpath,
#                   "MOD" = modname,
#                   'IDX' = IDX)
if (m == 1 & idx == 1) {
## first mod, first rep
write.table(
mtq,
append = F,
file =  paste0(
rootdir,
"/results/management_quantities_",
suff,
".csv"
),
row.names = F,
col.names = TRUE,
sep = ","
)
# write.table(
#   SPRseries,
#   append = F,
#   file =  paste0(rootdir, "/results/SPRseries.csv"),
#   row.names = F,
#   col.names = T,
#   sep = ","
# )
# write.table(
#   cpue,
#   append = F,
#   file =  paste0(rootdir, "/results/cpue.csv"),
#   row.names = F,
#   col.names = T,
#   sep = ","
# )
} else{
write.table(
mtq,
append = T,
file =  paste0(
rootdir,
"/results/management_quantities_",
suff,
".csv"
),
row.names = F,
col.names = F,
sep = ","
)
# write.table(
#   SPRseries,
#   append = T,
#   file =  paste0(rootdir, "/results/SPRseries.csv"),
#   row.names = F,
#   col.names = F,
#   sep = ","
# )
# write.table(
#   cpue,
#   append = T,
#   file =  paste0(rootdir, "/results/cpue.csv"),
#   row.names = F,
#   col.names = F,
#   sep = ","
# )
} ## end other reps
} ## end writeTables
## extract ref point estimates, in order of toMatch
## fancy indexing for sublist
# idx <- (m-1)*length(subdirs) + s
# refList[idx, "MOD" ] <- modname
# refList[idx, "REP"] <- splitpath
# refList[idx,'IDX'] <- IDX
# refList[idx,"SPB_SSBMSY"] <- mtemp$Kobe[mtemp$Kobe$Year == terminal_year,"B.Bmsy"]
# refList[idx,"F_FMSY"] <- mtemp$Kobe[mtemp$Kobe$Year == terminal_year,"F.Fmsy"]
# refList[idx,"LIKELIHOOD_TOTAL"] <- mtemp$likelihoods_used['TOTAL','values']
# refList[idx,"LIKELIHOOD_SURVEY"] <- mtemp$likelihoods_used['Survey','values']
# refList[idx,"LIKELIHOOD_CATCH"] <- mtemp$likelihoods_used['Catch','values']
# refList[idx,"EQUIL_CATCH"] <- mtemp$likelihoods_used['Equil_catch','values']
# idx <- idx + 1
# refList[idx,"RMSE_S4"] <- mtemp$index_variance_tuning_check %>% .$r.m.s.e %>% as.numeric()
} ## end of subdir loop
} ## end mods loop
suff = 'EM'
m
rm(m)
rm(s)
rm(idx)
if (!is.na(subpattern)) {
## if subpattern provided loop once more
for (m in 1:length(mods)) {
## loop into master file
modname <- sub('.*\\/', '', mods)[m]
## use SS_output function to extract quantities
subdirs <- mods[m] %>%
list.dirs(., recursive = T) %>%
.[grepl(subpattern, .)] %>%
.[!grepl("plots", .)]
for (s in 1:length(subdirs)) {
## skip if it's just directory with folders inside
if (length(list.dirs(subdirs[s], recursive = F)) > 0) next
idx <- 1 ## starts counting once you hit one
IDX <-  basename(subdirs)[s]
## pull out rep based on file name
splitpath0 <- strsplit(subdirs[s], "/")[[1]]
splitpath1 <- splitpath0[grep('Rep', splitpath0)]
splitpath <-  sub("Rep*", "", splitpath1)
splitpath <- ifelse(length(splitpath) > 1, splitpath[2], splitpath)
mtemp <- subdirs[s] %>%
SS_output(.,
covar = F,
forecast = F,
ncols = 1000)
mtq <- mtemp$derived_quants %>%
select(Label, Value) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(Yr %in% mtemp$startyr:mtemp$endyr) %>%
# filter(!is.na(.$Year)) %>%
mutate(Label2 = gsub("_.*", "", Label)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = Yr,
values_from = Value
) %>%
mutate('MOD' = suff,
"IDX" = IDX,
"REP" = splitpath) %>%
select(Yr, MOD, REP, IDX, everything())
## write and/or append SPRSeries
if (writeTables == T) {
# SPRseries <- data.frame(mtemp$sprseries,
#                        "B.Bmsy" = mtemp$Kobe$B.Bmsy,
#                        "F.Fmsy" = mtemp$Kobe$F.Fmsy,
#                        "rep" =  splitpath,
#                        "MOD" = modname,
#                        'IDX' = IDX)
#
#
# derivedquants <- mtemp$derived_quants %>%
#   select(Label,Value,StdDev) %>%
#   mutate(Year = sub("^[^_]*_", "", Label),
#          Quant = gsub( "_.*", "", Label),
#          MOD = modname)
#
# if(FleetName != 'All'){
#   cpue.df <- mtemp$cpue %>% filter(Name %in% FleetName)
# } else
#   cpue.df <- mtemp$cpue
#
# cpue <- data.frame(cpue.df,
#                   "rep" = splitpath,
#                   "MOD" = modname,
#                   'IDX' = IDX)
if (m == 1 & idx == 1) {
## first mod, first rep
write.table(
mtq,
append = F,
file =  paste0(
rootdir,
"/results/management_quantities_",
suff,
".csv"
),
row.names = F,
col.names = TRUE,
sep = ","
)
# write.table(
#   SPRseries,
#   append = F,
#   file =  paste0(rootdir, "/results/SPRseries.csv"),
#   row.names = F,
#   col.names = T,
#   sep = ","
# )
# write.table(
#   cpue,
#   append = F,
#   file =  paste0(rootdir, "/results/cpue.csv"),
#   row.names = F,
#   col.names = T,
#   sep = ","
# )
} else{
write.table(
mtq,
append = T,
file =  paste0(
rootdir,
"/results/management_quantities_",
suff,
".csv"
),
row.names = F,
col.names = F,
sep = ","
)
# write.table(
#   SPRseries,
#   append = T,
#   file =  paste0(rootdir, "/results/SPRseries.csv"),
#   row.names = F,
#   col.names = F,
#   sep = ","
# )
# write.table(
#   cpue,
#   append = T,
#   file =  paste0(rootdir, "/results/cpue.csv"),
#   row.names = F,
#   col.names = F,
#   sep = ","
# )
} ## end other reps
} ## end writeTables
## extract ref point estimates, in order of toMatch
## fancy indexing for sublist
# idx <- (m-1)*length(subdirs) + s
# refList[idx, "MOD" ] <- modname
# refList[idx, "REP"] <- splitpath
# refList[idx,'IDX'] <- IDX
# refList[idx,"SPB_SSBMSY"] <- mtemp$Kobe[mtemp$Kobe$Year == terminal_year,"B.Bmsy"]
# refList[idx,"F_FMSY"] <- mtemp$Kobe[mtemp$Kobe$Year == terminal_year,"F.Fmsy"]
# refList[idx,"LIKELIHOOD_TOTAL"] <- mtemp$likelihoods_used['TOTAL','values']
# refList[idx,"LIKELIHOOD_SURVEY"] <- mtemp$likelihoods_used['Survey','values']
# refList[idx,"LIKELIHOOD_CATCH"] <- mtemp$likelihoods_used['Catch','values']
# refList[idx,"EQUIL_CATCH"] <- mtemp$likelihoods_used['Equil_catch','values']
# idx <- idx + 1
# refList[idx,"RMSE_S4"] <- mtemp$index_variance_tuning_check %>% .$r.m.s.e %>% as.numeric()
} ## end of subdir loop
} ## end mods loop
} ## end !isna subpattern
devtools::load_all(".")
mtemp
subdirs
mtemp <- subdirs[s] %>%
SS_output(.,
covar = F,
forecast = F,
ncols = 1000)
mtemp$likelihoods_used
mtemp$likelihoods_used %>%
mutate(Lable = row.names(.))
mtemp$likelihoods_used %>%
mutate(Label = row.names(.)) %>%
select(-lambdas) %>%
pivot_wider(
.,
names_from = Label,
id_cols = variable,
values_from = valued
)
mtemp$likelihoods_used %>%
mutate(Label = row.names(.)) %>%
select(-lambdas) %>%
pivot_wider(
.,
names_from = Label,
id_cols = variable,
values_from = values
)
mtemp$likelihoods_used %>%
mutate(Label = row.names(.)) %>%
select(-lambdas) %>%
pivot_wider(
.,
names_from = Label,
values_from = values
)
mtemp$likelihoods_used %>%
mutate(Label = row.names(.)) %>%
select(-lambdas) %>%
pivot_wider(
.,
names_from = Label,
values_from = values
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = splitpath
) %>%
select(Yr, MOD, REP, everything(),-variable)
mtemp$likelihoods_used %>%
mutate(Label = row.names(.)) %>%
select(-lambdas) %>%
pivot_wider(
.,
names_from = Label,
values_from = values
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = NA,
"REP" = splitpath
) %>%
select(Yr, MOD, REP, everything())
mtemp$likelihoods_used %>%
mutate(Label = row.names(.)) %>%
select(-lambdas) %>%
pivot_wider(
.,
names_from = Label,
values_from = values
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = IDX,
"REP" = splitpath
) %>%
select(Yr, MOD, REP, everything())
mtemp$likelihoods_used %>%
mutate(Label = row.names(.)) %>%
select(-lambdas) %>%
pivot_wider(
.,
names_from = Label,
values_from = values
) %>%
mutate(
'Yr' = NA,
'MOD' = suff,
"IDX" = IDX,
"REP" = splitpath
) %>%
select(Yr, MOD, REP, IDX, everything())
devtools::load_all(".")
devtools::document()
mods
mtemp <- lapply(mods, SS_output) %>%
SSsummarize()
basename(mods)
names(mtemp$quants)
names(mtemp$quants)[1:length(mods)] <- basename(mods)
names(mtemp$quants)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr))
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = sub("OMRep","",variable)
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = sub(str_sub(idcol, -4, -1),"",idcol)
)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = sub(Yr,"",idcol)
)
mtemp$quants %>%
melt(id = c('Yr', 'Label')) %>%
filter(!is.na(.$Yr)) %>%
mutate(Label2 = gsub("_.*", "", Label) ,
idcol  = paste0(variable, Yr)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = idcol,
values_from = value
) %>%
mutate(
'Yr' = str_sub(idcol, -4, -1),
'MOD' = suff,
"IDX" = NA,
"REP" = str_sub(idcol, 6, -5)
) %>%
select(Yr, MOD, REP, IDX, everything(), -idcol)
mtemp$likelihoods
names(mtemp$likelihoods)[1:length(mods)] <- basename(mods)
mtemp$likelihoods %>%
melt(id = "Label") %>%
pivot_wider(
.,
names_from = Label,
id_cols = variable,
values_from = value
) %>%
mutate(
'MOD' = suff,
"IDX" = NA,
"REP" = str_sub(variable, start = 6, end = -5)
) %>%
select(Yr, MOD, REP, everything(),-variable)
mtemp$likelihoods %>%
melt(id = "Label") %>%
pivot_wider(
.,
names_from = Label,
id_cols = variable,
values_from = value
) %>%
mutate(
'MOD' = suff,
"IDX" = NA,
"REP" = str_sub(variable, start = 6, end = -5)
) %>%
select(MOD, REP, everything(),-variable)
mtemp$likelihoods %>%
melt(id = "Label") %>%
pivot_wider(
.,
names_from = Label,
id_cols = variable,
values_from = value
)
mtemp$likelihoods %>%
melt(id = "Label") %>%
pivot_wider(
.,
names_from = Label,
id_cols = variable,
values_from = value
) %>%
mutate(
'MOD' = suff,
"IDX" = NA,
"REP" = sub('OMRep',"",variable)
) %>%
select(MOD, REP, everything(),-variable)
splitpath
devtools::load_all(".")
