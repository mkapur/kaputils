head(tt$derived_quants)
mtemp_raw = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/sample324",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep1_SpaceLast/correct",
NoCompOK = TRUE, forecast = FALSE)
mtemp_raw = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/sample3242",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep4_SpaceFirst2/EMRep4_SpaceFirst/correct",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw2$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep4_SpaceFirst2/correct",
NoCompOK = TRUE, forecast = FALSE)
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep4_SpaceFirst/correct",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw2$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep5_SpaceFirst/correct",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw2$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep1_SpaceFirst/correct",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw2$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep1_SpaceLast/correct",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw2$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep5_SpaceLast/correct",
NoCompOK = TRUE, forecast = FALSE)
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-03-31/OMRep1/EMRep12_SpaceLast/correct",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw2$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-04-01/OMRep47/EMRep1_SpaceLast/S",
NoCompOK = TRUE, forecast = FALSE)
head(mtemp_raw2$derived_quants) ## looks good
mtemp_raw2 = SS_output("C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-04-01/OMRep47/EMRep1_SpaceLast/correct",
NoCompOK = TRUE, forecast = FALSE)
subdirs
# kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/sneak/runs/2020-04-01/";
terminal_year = 2016;
suffix = "EM_E2";
pattern = "OM";
subpattern = "*SpaceLast";
writeTables = T
# )
suff <- ifelse(is.na(suffix), ifelse(is.na(subpattern), pattern, subpattern), suffix)
## iterate avail. runs
if (!is.na(pattern)) {
mods <- list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
}  else{
mods <- rootdir
}
devtools::load_all(".")
suff <- ifelse(is.na(suffix), ifelse(is.na(subpattern), pattern, subpattern), suffix)
## iterate avail. runs
if (!is.na(pattern)) {
mods <- list.dirs(rootdir, recursive = F, full.names = T) %>%
.[grepl(pattern, .)]
}  else{
mods <- rootdir
}
## if subpattern provided loop once more
sIDX <- 0
modname <- sub('.*///', '', mods)[m]
## use SS_output function to extract quantities
subdirs0 <- mods[m] %>%
list.dirs(., recursive = T)
subdirs <-  subdirs0 %>%
.[grepl(subpattern, .)] %>%
.[!grepl("plots", .)]
m=1
## loop into master file
modname <- sub('.*///', '', mods)[m]
## use SS_output function to extract quantities
subdirs <- mods[m] %>%
list.dirs(., recursive = T) %>%
.[grepl(subpattern, .)] %>%
.[!grepl("plots", .)]
subdirs
s = 3
IDX <-  basename(subdirs)[s]
sIDX <- sIDX + 1 ## will be one for first succesful hit
## pull out rep based on file name
splitpath0 <- strsplit(subdirs[s], "/")[[1]]
splitpath1 <- splitpath0[grep('Rep', splitpath0)]
splitpath2 <-  sub("Rep*", "", splitpath1)
splitpath <- ifelse(length(splitpath2) > 1, splitpath2[2], splitpath)
mtemp <-   SS_output(subdirs[s],
NoCompOK = TRUE, forecast = FALSE)
mtemp$derived_quants
mtemp$derived_quants %>%
select(Label, Value) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(!(Yr %in% mtemp$startyr:mtemp$endyr)) %>%
select(-Yr) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = Value
)
mtemp$derived_quants %>%
select(Label, Value) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(!(Yr %in% mtemp$startyr:mtemp$endyr))
mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label))
mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(!(Yr %in% mtemp$startyr:mtemp$endyr)) %>%
select(-Yr)
mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(!(Yr %in% mtemp$startyr:mtemp$endyr)) %>%
select(-Yr) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = Value
)
mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(!(Yr %in% mtemp$startyr:mtemp$endyr)) %>%
select(-Yr) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = Value
) %>%
mutate(
'Yr' = NA,
'MOD' = splitpath1[1],
"IDX" = IDX,
"REP" = splitpath
) %>%
select(-MOD, -REP, IDX, everything())
mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(Yr %in% mtemp$startyr:mtemp$endyr) %>%
# filter(!is.na(.$Year)) %>%
mutate(Label2 = gsub("_.*", "", Label)) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = Yr,
values_from = Value
)
mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label))
mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(Yr %in% mtemp$startyr:mtemp$endyr)
## time series
mtq <- mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(Yr %in% mtemp$startyr:mtemp$endyr) %>%
# filter(!is.na(.$Year)) %>%
mutate(Label2 = gsub("_.*", "", Label) ) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = Yr,
values_from = c(StdDev,Value)
) %>%
mutate('MOD' = splitpath2[1],
"IDX" = IDX,
"REP" = splitpath,
"RECDev" = mtemp$recruit$dev[mtemp$recruit$Yr%in% mtemp$startyr:mtemp$endyr ]) %>%
select(Yr, MOD, REP, IDX, everything()) %>%
merge(., refList, by.x = c('IDX'), by.y = c('IDX'), all.y = FALSE) %>%
mutate(Yr = Yr.x, MOD = MOD.x, REP = REP.x, IDX = IDX) %>%
select(-Yr.y, -Yr.x, -REP.y, -REP.x, -MOD.y, -MOD.x) %>%
select(Yr, MOD, IDX, REP, everything())
## REF POINTS
refList <-  mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(!(Yr %in% mtemp$startyr:mtemp$endyr)) %>%
select(-Yr) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = Value
) %>%
mutate(
'Yr' = NA,
'MOD' = splitpath1[1],
"IDX" = IDX,
"REP" = splitpath
) %>%
select(-MOD, -REP, IDX, everything())
## REF POINTS
refList <-  mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(!(Yr %in% mtemp$startyr:mtemp$endyr)) %>%
select(-Yr) %>%
pivot_wider(
.,
names_from = Label,
# id_cols = idcol,
values_from = c(StdDev,Value)
) %>%
mutate(
'Yr' = NA,
'MOD' = splitpath1[1],
"IDX" = IDX,
"REP" = splitpath
) %>%
select(-MOD, -REP, IDX, everything())
refList
## time series
mtq <- mtemp$derived_quants %>%
select(Label, Value,StdDev) %>%
mutate(Yr = gsub(".*_", "", Label)) %>%
filter(Yr %in% mtemp$startyr:mtemp$endyr) %>%
# filter(!is.na(.$Year)) %>%
mutate(Label2 = gsub("_.*", "", Label) ) %>%
pivot_wider(
.,
names_from = Label2,
id_cols = Yr,
values_from = c(StdDev,Value)
) %>%
mutate('MOD' = splitpath2[1],
"IDX" = IDX,
"REP" = splitpath,
"RECDev" = mtemp$recruit$dev[mtemp$recruit$Yr%in% mtemp$startyr:mtemp$endyr ]) %>%
select(Yr, MOD, REP, IDX, everything()) %>%
merge(., refList, by.x = c('IDX'), by.y = c('IDX'), all.y = FALSE) %>%
mutate(Yr = Yr.x, MOD = MOD.x, REP = REP.x, IDX = IDX) %>%
select(-Yr.y, -Yr.x, -REP.y, -REP.x, -MOD.y, -MOD.x) %>%
select(Yr, MOD, IDX, REP, everything())
head(mtq)
View(mtw)
View(mtq)
head(mtemp$derived_quants)
devtools::load_all(".")
## not run:
setwd("C:/Users/mkapur/Dropbox/UW/assessments/sab_2019/200.00_base_files_29May/100.00_base_files/hklpot_agg")
## not run:
## read in CSVs and drop  'trawl'
cs <- read.csv("C:/Users/mkapur/Dropbox/UW/assessments/sab_2019/200.00_base_files_29May/100.00_base_files/hklpot_agg/sablefish_OB_DisRatios_cs_2019_Coastwide_trawl_fixed_2019-06-27.csv")
library(readr)
sablefish_OB_DisRatios_boot_cs_Gears_Coastwide_2021_01_21 <- read_csv("C:/Users/mkapur/Dropbox/UW/assessments/sab-2021/dataprep/raw_data/Observer/sablefish_OB_DisRatios_boot_cs_Gears_Coastwide_2021-01-21.csv")
View(sablefish_OB_DisRatios_boot_cs_Gears_Coastwide_2021_01_21)
library(readr)
ncs <- read_csv("C:/Users/mkapur/Dropbox/UW/assessments/sab-2021/dataprep/raw_data/Observer/sablefish_OB_DisRatios_boot_ncs_Gears_Coastwide_2021-01-21.csv")
View(ncs)
reweight_discards <- function(ncs,cs,fleet, fleetno = 1, month = 7,years,units,writeTable = F,
writeloc = paste0(getwd(),"discard_rates_ss_",Sys.Date(),".csv")){
for(i in 1:length(fleet)){
discard <-  ncs  %>% filter(gear3 == fleet[i]) %>%
select(yr = ryear, "OBS" = Observed_Ratio, 'sd' = StdDev.Boot_Ratio ) ## raw ncs, with SDs
## compute re-weighted values for cs years
discard_late <- merge(cs %>% select(ryear,'CS_LBS' = Observed_RETAINED.LBS, "CS_RATIO" = Observed_Ratio ) ,
ncs  %>% select(ryear,'NCS_LBS' = Median.Boot_RETAINED.LBS , "NCS_RATIO" = Observed_Ratio ) , by = 'ryear') %>%
mutate(tot = CS_LBS+ NCS_LBS) %>%
group_by(ryear) %>%
summarise(cs_prop = CS_LBS/tot,
ncs_prop = NCS_LBS/tot,
cs_propxrate  = cs_prop*CS_RATIO,
ncs_propxrate  = ncs_prop*NCS_RATIO,
total_disrate = cs_propxrate+ncs_propxrate)
## overwrite ncs years, retaining SDs
discard[discard$yr > 2010 ,"OBS"] <- discard_late$total_disrate
## format to match SS
discard <- discard %>%
mutate(fleet = fleetno, month = month, OBS = round(OBS,6), sd = round(sd,6),
note = paste0("#",fleet[i]) ) %>%
select(yr, month, fleet, OBS,sd, note) %>%
filter(yr %in% years)
if(writeTable){
write.table(discard,file = paste0(writeloc,"/discard_rates_SS_",Sys.Date(),"_",fleet,".csv"),row.names = FALSE, sep = " ", quote = F)
cat(paste0('wrote discard rate table for ', fleet[i],' to ',writeloc,"\n"))
}
return(discard)
rm(discard); rm(discard_late)
} ## end loop fleets
} ## end function
reweight_discards(ncs,cs,fleet = 'HLandPot', fleetno = 1, month = 7,years,writeTable = F,
writeloc = getwd(), years = 2009:2015)
require(dplyr)
reweight_discards(
ncs,
cs,
fleet = 'FixedGears',
fleetno = 1,
month = 7,
years,
writeTable = F,
writeloc = getwd(),
years = 2009:2015
)
names(ncs)
reweight_discards <- function(ncs,cs,fleet, fleetno = 1, month = 7,years,units,writeTable = F,
writeloc = paste0(getwd(),"discard_rates_ss_",Sys.Date(),".csv")){
for(i in 1:length(fleet)){
discard <-  ncs  %>% filter(gear2 == fleet[i]) %>%
select(yr = ryear, "OBS" = Observed_Ratio, 'sd' = StdDev.Boot_Ratio ) ## raw ncs, with SDs
## compute re-weighted values for cs years
discard_late <- merge(cs %>% select(ryear,'CS_LBS' = Observed_RETAINED.LBS, "CS_RATIO" = Observed_Ratio ) ,
ncs  %>% select(ryear,'NCS_LBS' = Median.Boot_RETAINED.LBS , "NCS_RATIO" = Observed_Ratio ) , by = 'ryear') %>%
mutate(tot = CS_LBS+ NCS_LBS) %>%
group_by(ryear) %>%
summarise(cs_prop = CS_LBS/tot,
ncs_prop = NCS_LBS/tot,
cs_propxrate  = cs_prop*CS_RATIO,
ncs_propxrate  = ncs_prop*NCS_RATIO,
total_disrate = cs_propxrate+ncs_propxrate)
## overwrite ncs years, retaining SDs
discard[discard$yr > 2010 ,"OBS"] <- discard_late$total_disrate
## format to match SS
discard <- discard %>%
mutate(fleet = fleetno, month = month, OBS = round(OBS,6), sd = round(sd,6),
note = paste0("#",fleet[i]) ) %>%
select(yr, month, fleet, OBS,sd, note) %>%
filter(yr %in% years)
if(writeTable){
write.table(discard,file = paste0(writeloc,"/discard_rates_SS_",Sys.Date(),"_",fleet,".csv"),row.names = FALSE, sep = " ", quote = F)
cat(paste0('wrote discard rate table for ', fleet[i],' to ',writeloc,"\n"))
}
return(discard)
rm(discard); rm(discard_late)
} ## end loop fleets
} ## end function
reweight_discards(
ncs,
cs,
fleet = 'FixedGears',
fleetno = 1,
month = 7,
years,
writeTable = F,
writeloc = getwd(),
years = 2009:2015
)
cs <- sablefish_OB_DisRatios_boot_cs_Gears_Coastwide_2021_01_21
reweight_discards(
ncs,
cs,
fleet = 'FixedGears',
fleetno = 1,
month = 7,
years,
writeTable = F,
writeloc = getwd(),
years = 2009:2015
)
reweight_discards <- function(ncs,cs,fleet, fleetno = 1, month = 7,years,units,writeTable = F,
writeloc = paste0(getwd(),"discard_rates_ss_",Sys.Date(),".csv")){
for(i in 1:length(fleet)){
discard <-  ncs  %>% filter(gear2 == fleet[i]) %>%
select(yr = ryear, "OBS" = Observed_Ratio, 'sd' = StdDev.Boot_Ratio ) ## raw ncs, with SDs
## compute re-weighted values for cs years
discard_late <- merge(cs %>% select(ryear,'CS_MTS' = Observed_RETAINED.MTS, "CS_RATIO" = Observed_Ratio ) ,
ncs  %>% select(ryear,'NCS_MTS' = Median.Boot_RETAINED.MTS , "NCS_RATIO" = Observed_Ratio ) , by = 'ryear') %>%
mutate(tot = CS_MTS+ NCS_MTS) %>%
group_by(ryear) %>%
summarise(cs_prop = CS_MTS/tot,
ncs_prop = NCS_MTS/tot,
cs_propxrate  = cs_prop*CS_RATIO,
ncs_propxrate  = ncs_prop*NCS_RATIO,
total_disrate = cs_propxrate+ncs_propxrate)
## overwrite ncs years, retaining SDs
discard[discard$yr > 2010 ,"OBS"] <- discard_late$total_disrate
## format to match SS
discard <- discard %>%
mutate(fleet = fleetno, month = month, OBS = round(OBS,6), sd = round(sd,6),
note = paste0("#",fleet[i]) ) %>%
select(yr, month, fleet, OBS,sd, note) %>%
filter(yr %in% years)
if(writeTable){
write.table(discard,file = paste0(writeloc,"/discard_rates_SS_",Sys.Date(),"_",fleet,".csv"),row.names = FALSE, sep = " ", quote = F)
cat(paste0('wrote discard rate table for ', fleet[i],' to ',writeloc,"\n"))
}
return(discard)
rm(discard); rm(discard_late)
} ## end loop fleets
} ## end function
reweight_discards(
ncs,
cs,
fleet = 'FixedGears',
fleetno = 1,
month = 7,
years,
writeTable = F,
writeloc = getwd(),
years = 2009:2015
)
i = 1
discard <-  ncs  %>% filter(gear2 == fleet[i]) %>%
select(yr = ryear, "OBS" = Observed_Ratio, 'sd' = StdDev.Boot_Ratio ) ## raw ncs, with SDs
fleet = 'FixedGears'
discard <-  ncs  %>% filter(gear2 == fleet[i]) %>%
select(yr = ryear, "OBS" = Observed_Ratio, 'sd' = StdDev.Boot_Ratio ) ## raw ncs, with SDs
discard
## compute re-weighted values for cs years
discard_late <- merge(cs %>% select(ryear,'CS_MTS' = Observed_RETAINED.MTS, "CS_RATIO" = Observed_Ratio ) ,
ncs  %>% select(ryear,'NCS_MTS' = Median.Boot_RETAINED.MTS , "NCS_RATIO" = Observed_Ratio ) , by = 'ryear') %>%
mutate(tot = CS_MTS+ NCS_MTS) %>%
group_by(ryear) %>%
summarise(cs_prop = CS_MTS/tot,
ncs_prop = NCS_MTS/tot,
cs_propxrate  = cs_prop*CS_RATIO,
ncs_propxrate  = ncs_prop*NCS_RATIO,
total_disrate = cs_propxrate+ncs_propxrate)
discard_late
discard[discard$yr > 2010 ,"OBS"]
## overwrite ncs years, retaining SDs
discard[discard$yr > 2010 ,"OBS"] <- discard_late$total_disrate
discard_late$total_disrate
discard_late$total_disrate[discard_late$ryear > 2010,]
discard_late
ncs_temp <- ncs  %>% filter(gear2 == fleet[i])
cs_temp <- cs %>% filter(gear2 == fleet[i])
discard <- ncs_temp  %>%
select(yr = ryear, "OBS" = Observed_Ratio, 'sd' = StdDev.Boot_Ratio ) ## raw ncs, with SDs
## compute re-weighted values for cs years
discard_late <- merge(cs_temp %>% select(ryear,'CS_MTS' = Observed_RETAINED.MTS, "CS_RATIO" = Observed_Ratio ) ,
ncs_temp  %>% select(ryear,'NCS_MTS' = Median.Boot_RETAINED.MTS , "NCS_RATIO" = Observed_Ratio ) , by = 'ryear') %>%
mutate(tot = CS_MTS+ NCS_MTS) %>%
group_by(ryear) %>%
summarise(cs_prop = CS_MTS/tot,
ncs_prop = NCS_MTS/tot,
cs_propxrate  = cs_prop*CS_RATIO,
ncs_propxrate  = ncs_prop*NCS_RATIO,
total_disrate = cs_propxrate+ncs_propxrate)
discard_late
## overwrite ncs years, retaining SDs
discard[discard$yr > 2010 ,"OBS"] <- discard_late$total_disrate
## format to match SS
discard <- discard %>%
mutate(fleet = fleetno, month = month, OBS = round(OBS,6), sd = round(sd,6),
note = paste0("#",fleet[i]) ) %>%
select(yr, month, fleet, OBS,sd, note) %>%
filter(yr %in% years)
reweight_discards <- function(ncs,cs,fleet, fleetno = 1, month = 7,years,units,writeTable = F,
writeloc = paste0(getwd(),"discard_rates_ss_",Sys.Date(),".csv")){
for(i in 1:length(fleet)){
ncs_temp <- ncs  %>% filter(gear2 == fleet[i])
cs_temp <- cs %>% filter(gear2 == fleet[i])
discard <- ncs_temp  %>%
select(yr = ryear, "OBS" = Observed_Ratio, 'sd' = StdDev.Boot_Ratio ) ## raw ncs, with SDs
## compute re-weighted values for cs years
discard_late <- merge(cs_temp %>% select(ryear,'CS_MTS' = Observed_RETAINED.MTS, "CS_RATIO" = Observed_Ratio ) ,
ncs_temp  %>% select(ryear,'NCS_MTS' = Median.Boot_RETAINED.MTS , "NCS_RATIO" = Observed_Ratio ) , by = 'ryear') %>%
mutate(tot = CS_MTS+ NCS_MTS) %>%
group_by(ryear) %>%
summarise(cs_prop = CS_MTS/tot,
ncs_prop = NCS_MTS/tot,
cs_propxrate  = cs_prop*CS_RATIO,
ncs_propxrate  = ncs_prop*NCS_RATIO,
total_disrate = cs_propxrate+ncs_propxrate)
## overwrite ncs years, retaining SDs
discard[discard$yr > 2010 ,"OBS"] <- discard_late$total_disrate
## format to match SS
discard <- discard %>%
mutate(fleet = fleetno, month = month, OBS = round(OBS,6), sd = round(sd,6),
note = paste0("#",fleet[i]) ) %>%
select(yr, month, fleet, OBS,sd, note) %>%
filter(yr %in% years)
if(writeTable){
write.table(discard,file = paste0(writeloc,"/discard_rates_SS_",Sys.Date(),"_",fleet,".csv"),row.names = FALSE, sep = " ", quote = F)
cat(paste0('wrote discard rate table for ', fleet[i],' to ',writeloc,"\n"))
}
return(discard)
rm(discard); rm(discard_late)
} ## end loop fleets
} ## end function
reweight_discards(
ncs,
cs,
fleet = 'FixedGears',
fleetno = 1,
month = 7,
years,
writeTable = F,
writeloc = getwd(),
years = 2009:2015
)
reweight_discards(
ncs,
cs,
fleet = 'FixedGears',
fleetno = 1,
month = 7,
years,
writeTable = F,
writeloc = getwd(),
years = 2002:2015
)
names(ncs)
names(c)
min(catch_projections$YEAR)-1
fore$ForeCatch
forecast_start
nrow(fore$ForeCatch)
paste0(rootdir,"/",paste0("forecasts/forecast",forecast_start))
