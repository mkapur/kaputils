YOI <- years
dec_table <- matrix(NA, nrow = length(YOI)*3, ncol = 9)
dec_table <- data.frame(dec_table)
names(dec_table) <- c('Scenario','Year','catch',paste(c("spawnbio","depl"),rep(state_names,each = 2)))
dec_table$Year <- rep(YOI,3)
idxr <- idxc <- 1
for(catch in seq_along(catch_names)){ ## loop catch scen
idxc <- 1 ## reset to initial column for new catch scenario
for(state in seq_along(state_names)){
# if(catch != 'ABC'  | state != 'base'){
tempdir <- dir(rootdir, full.names = T)[grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))]
# } else if(catch == 'ABC'){
# tempdir <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_",catch,"_",state,"/forecasts/forecast2030")
# }
mod <- SS_output(tempdir, covar = F)
if(catch == 1 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row1Catch,2)
} else if(catch == 3 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row3Catch,2)
} else if (catch == 1 &  idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(baseCatch,2)
}
# read.csv(paste0(tempdir,"/tempForeCatch.csv"))
## input what was given to forecast file
dec_table$Scenario[idxr:(idxr+length(YOI)-1)] <- rep(catch, length(idxr:(idxr+length(YOI)-1)))
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+2] <-  mod$derived_quants[grep(paste0("SSB_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+3] <-  mod$derived_quants[grep(paste0("Bratio_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
idxc <- idxc+1 ## move to next set of columns as state updates
# idxc <- idxc+3; idxr <-
#     df["Depletion",y] <- paste0(round(basemod10$derived_quants[grep(paste0("Bratio_",YOI[y],collapse = "|"), basemod10$derived_quants$Label),"Value"],3)*100,"%")
} ## end state
idxr <- idxr+length(YOI) ## jump down to next set of years when catch scenario updates
} ## end catch
dec_table
ound(row1Catch,2)
round(row1Catch,2)
## error trapping
if(length(baseCatch) != length(years) | length(row1Catch) != length(years)   |length(row3Catch) != length(years)) {
stop("length of input catch vectors must match length of input years \n")
}
head(dec_table)
YOI <- years
dec_table <- matrix(NA, nrow = length(YOI)*3, ncol = 9)
dec_table <- data.frame(dec_table)
names(dec_table) <- c('Scenario','Year','catch',paste(c("spawnbio","depl"),rep(state_names,each = 2)))
dec_table$Year <- rep(YOI,3)
idxr <- idxc <- 1 ## setup row and column indices
for(catch in seq_along(catch_names)){ ## loop catch scen
idxc <- 1 ## reset to initial column for new catch scenario
for(state in seq_along(state_names)){
tempdir <- dir(rootdir, full.names = T)[grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))]
mod <- SS_output(tempdir, covar = F); rm(tempdir)
if(catch == 1 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row1Catch,2)
} else if(catch == 3 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row3Catch,2)
} else if (catch == 1 &  idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(baseCatch,2)
}
## input what was given to forecast file
dec_table$Scenario[idxr:(idxr+length(YOI)-1)] <- rep(catch_names[catch], length(idxr:(idxr+length(YOI)-1)))
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+2] <-  mod$derived_quants[grep(paste0("SSB_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+3] <-  mod$derived_quants[grep(paste0("Bratio_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
idxc <- idxc+1 ## move to next set of columns as state updates
} ## end state
idxr <- idxr+length(YOI) ## jump down to next set of years when catch scenario updates
} ## end catch
setwd("C:/Users/Maia Kapur/Dropbox")
devtools::document('kaputils')
devtools::document('kaputils')
devtools::document('kaputils')
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
require(devtools)
update.packages('rlang')
devtools::document('kaputils')
require(rlang)
devtools::document('kaputils')
install.pacakges('rlang')
install.packages('rlang')
install.packages("rlang")
library(rlang)
library(devtools)
devtools::install_github("hadley/devtools")
setwd("C:/Users/Maia Kapur/Dropbox")
devtools::document("kaputils")
devtools::load_all("kaputils")
devtools::load_all(".")
setwd("C:/Users/mkapur/Dropbox")
devtools::document('kaputils')
devtools::load_all("kaputils")
devtools::document('kaputils')
devtools::document('kaputils')
devtools::load_all(".")
devtools::load_all(".")
setwd("C:/Users/Maia Kapur/Dropbox")
devtools::document('kaputils')
setwd("C:/Users/mkapur/Dropbox")
devtools::document('kaputils')
devtools::document('kaputils')
devtools::load_all("kaputils")
#' compareNA
#' @param v1 first thing, can be NA
#' @param v2 second thing, can be NA
#' @seealso \link["http://www.cookbook-r.com/Manipulating_data/Comparing_vectors_or_factors_with_NA/"]
#' @export
compareNA <- function(v1,v2){
same <- (v1 == v2) | (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
}
compareNA
?r4ss::SS_RunJitter()
devtools::load_all(".")
rootdir = rd <- "C:/Users/mkapur/Dropbox/UW/assessments/widow_2019_update/decision_table/fromKC/" ## a directory with all 9 model runs
state_names = c("Low","Base","High")
catch_names = c('constantC','0.45','0.25')
baseCatch = rep("10000", length(2019:2030))
row1Catch =  rep("FILL IN", length(2019:2030))
row3Catch =  rep("FILL IN", length(2019:2030))  round = F
round = F
## error trapping
if(length(baseCatch) != length(years) | length(row1Catch) != length(years)   |length(row3Catch) != length(years)) {
stop("length of input catch vectors must match length of input years \n")
}
years = 2019:2030
## error trapping
if(length(baseCatch) != length(years) | length(row1Catch) != length(years)   |length(row3Catch) != length(years)) {
stop("length of input catch vectors must match length of input years \n")
}
row3Catch =  rep("FILL IN", length(2019:2030))
## error trapping
if(length(baseCatch) != length(years) | length(row1Catch) != length(years)   |length(row3Catch) != length(years)) {
stop("length of input catch vectors must match length of input years \n")
}
if(length(dir(rootdir)) < 9) {
stop("there are less than 9 directories in your root directory, not enough to fill table \n")
}
YOI <- years
dec_table <- matrix(NA, nrow = length(YOI)*3, ncol = 9)
dec_table <- data.frame(dec_table)
names(dec_table) <- c('Scenario','Year','catch',paste(c("spawnbio","depl"),rep(state_names,each = 2)))
dec_table$Year <- rep(YOI,3)
idxr <- idxc <- 1 ## setup row and column indices
for(catch in seq_along(catch_names)){ ## loop catch scen
idxc <- 1 ## reset to initial column for new catch scenario
for(state in seq_along(state_names)){
tempdir <- dir(rootdir, full.names = T)[grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))]
mod <- SS_output(tempdir, covar = F); rm(tempdir)
if(catch == 1 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row1Catch,2)
} else if(catch == 3 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row3Catch,2)
} else if (catch == 1 &  idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(baseCatch,2)
}
## input what was given to forecast file
dec_table$Scenario[idxr:(idxr+length(YOI)-1)] <- rep(catch_names[catch], length(idxr:(idxr+length(YOI)-1)))
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+2] <-  mod$derived_quants[grep(paste0("SSB_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+3] <-  mod$derived_quants[grep(paste0("Bratio_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
idxc <- idxc+1 ## move to next set of columns as state updates
} ## end state
idxr <- idxr+length(YOI) ## jump down to next set of years when catch scenario updates
} ## end catch
require(r4ss)
if(round  == T){
dec_table[,c(5,7,9)] <- round(dec_table[,c(5,7,9)],2)
dec_table[,c(4,6,8)] <- round(dec_table[,c(4,6,8)],0)
}
idxr <- idxc <- 1 ## setup row and column indices
for(catch in seq_along(catch_names)){ ## loop catch scen
idxc <- 1 ## reset to initial column for new catch scenario
for(state in seq_along(state_names)){
tempdir <- dir(rootdir, full.names = T)[grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))]
mod <- SS_output(tempdir, covar = F); rm(tempdir)
if(catch == 1 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row1Catch,2)
} else if(catch == 3 & idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(row3Catch,2)
} else if (catch == 1 &  idxc ==2){
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(baseCatch,2)
}
## input what was given to forecast file
dec_table$Scenario[idxr:(idxr+length(YOI)-1)] <- rep(catch_names[catch], length(idxr:(idxr+length(YOI)-1)))
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+2] <-  mod$derived_quants[grep(paste0("SSB_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+3] <-  mod$derived_quants[grep(paste0("Bratio_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
idxc <- idxc+1 ## move to next set of columns as state updates
} ## end state
idxr <- idxr+length(YOI) ## jump down to next set of years when catch scenario updates
} ## end catch
dec_table$Year <- rep(YOI,3)
idxr <- idxc <- 1 ## setup row and column indices
catch
idxc <- 1 ## reset to initial column for new catch scenario
state
tempdir <- dir(rootdir, full.names = T)[grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))]
mod <- SS_output(tempdir, covar = F); rm(tempdir)
catch == 1 & idxc ==2
catch == 3 & idxc ==2
catch == 1 &  idxc ==2
## input what was given to forecast file
dec_table$Scenario[idxr:(idxr+length(YOI)-1)] <- rep(catch_names[catch], length(idxr:(idxr+length(YOI)-1)))
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+2] <-  mod$derived_quants[grep(paste0("SSB_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+2]
mod$derived_quants[grep(paste0("SSB_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
YOI
mod$derived_quants[grep("SSB_",
mod$derived_quants$Label),"Value"]
mod$derived_quants[grep("SSB_",
mod$derived_quants$Label),]
devtools::load_all(".")
rootdir = "C:/Users/mkapur/Dropbox/UW/assessments/widow_2019_update/decision_table/mk_attempts2"
state_names = c("low","base","high"),
years = 2021:2030,
catch_names = c('contsC','p045','p025'),
baseCatch = bc45[,1],
row1Catch =  concstc[,1],
row3Catch =  bc25[,1],
round = F,
writeTable = F,
writeloc = rd
state_names = c("low","base","high")
years = 2021:2030,
catch_names = c('contsC','p045','p025');
baseCatch = bc45[,1];
row1Catch =  concstc[,1];
row3Catch =  bc25[,1];
round = F;
writeTable = F;
writeloc = rd
dir(rootdir, full.names = T)
dir(rootdir, full.names = T)[grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))]
state_names
state = 'low'
state = 1
catch = 1
dir(rootdir, full.names = T)[grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))]
grepl(paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state]), dir(rootdir))
paste0(state_names[state],".*",catch_names[catch],"|",catch_names[catch],".*",state_names[state])
require(r4ss)
?SSplotComps
load("C:/Users/Maia Kapur/Dropbox/UW/assessments/widow_2019_update/Bio_All_NWFSC.Combo_2019-07-01.rda")
head(Data)
plotMnwtMatrix(summaryoutput = SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/widow_2019_update/base2019"),
surveydata = Data,
maxage = 30,
png = F)
plotMnwtMatrix <- function(summaryoutput, surveydata, fleet = 1, maxage = 30, png = F, printfolder){
## for each age-year-sex combo, compute the difference between SS mean and rawdat
## will drop NA sex/age/weights likely losing years, leading to blank
survey_summary <- surveydata %>%
filter(!is.na(Sex) & !is.na(Age) & !is.na(Weight)) %>%
group_by(Sex, Year, Age, Project) %>%
summarise(survey_meanwt = mean(Weight))
model_summary <- summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
fulldat <-  merge(survey_summary, model_summary,
by = c("Year","Sex","Age")) %>%
mutate(surv_minus_SS = survey_meanwt - SS_meanwt) %>%
filter(Age <= maxage)
fulldat$Sex <- as.character(factor(fulldat$Sex,
levels = c("F", "M", "U"), labels = c("Female", "Male", "Unsexed")))
p <- ggplot(fulldat, aes(x = Year, y = Age)) +
theme_bw()+
theme(panel.grid = element_blank(),
legend.position = 'bottom') +
geom_tile(aes(fill = surv_minus_SS)) +
scale_fill_gradient2() +
# scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Survey Mean Weight - SS mean Weight") +
coord_flip() +
scale_y_continuous(breaks = seq(0,30,5), sec.axis = dup_axis()) +
scale_x_reverse() +
geom_text(size = 2, aes(label = round(surv_minus_SS, 2))) +
facet_wrap(~Sex)
print(p)
if(png) ggsave(plot = p, filename = file.path(printfolder, "/meanweight_plot.png"))
return(fulldat)
}
plotMnwtMatrix(summaryoutput = SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/widow_2019_update/base2019"),
surveydata = Data,
maxage = 30,
png = F)
require(dply)
require(dplyr)
plotMnwtMatrix(summaryoutput = SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/widow_2019_update/base2019"),
surveydata = Data,
maxage = 30,
png = F)
require(reshape2)
plotMnwtMatrix(summaryoutput = SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/widow_2019_update/base2019"),
surveydata = Data,
maxage = 30,
png = F)
devtools::load_all(".")
plotMnwtMatrix(summaryoutput = SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/widow_2019_update/base2019"),
surveydata = Data,
maxage = 30,
png = F)
surveydata = Data
replist = SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/widow_2019_update/base2019")
summaryoutput = replist
maxage = 30
png = F)
png = F
surveydata %>%
filter(!is.na(Sex) & !is.na(Age) & !is.na(Weight)) %>%
group_by(Sex, Year, Age, Project) %>%
summarise(survey_meanwt = mean(Weight))
summaryoutput$wtatage
model_summary <- summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
names(summaryoutput$wtatage )
fleet = 1
summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
## for each age-year-sex combo, compute the difference between SS mean and rawdat
## will drop NA sex/age/weights likely losing years, leading to blank
survey_summary <- surveydata %>%
filter(!is.na(Sex) & !is.na(Age) & !is.na(Weight)) %>%
group_by(Sex, Year, Age, Project) %>%
summarise(survey_meanwt = mean(Weight))
model_summary <- summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
fulldat <-  merge(survey_summary, model_summary,
by = c("Year","Sex","Age")) %>%
mutate(surv_minus_SS = survey_meanwt - SS_meanwt) %>%
filter(Age <= maxage)
survey_summary
model_summary
## for each age-year-sex combo, compute the difference between SS mean and rawdat
## will drop NA sex/age/weights likely losing years, leading to blank
survey_summary <- surveydata %>%
filter(!is.na(Sex) & !is.na(Age) & !is.na(Weight)) %>%
group_by(Sex, Year, Age, Project) %>%
dplyr::summarise(survey_meanwt = mean(Weight))
model_summary <- summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
fulldat <-  merge(survey_summary, model_summary,
by = c("Year","Sex","Age")) %>%
mutate(surv_minus_SS = survey_meanwt - SS_meanwt) %>%
filter(Age <= maxage)
fulldat
plotMnwtMatrix <- function(summaryoutput, surveydata, fleet = 1, maxage = 30, png = F, printfolder){
## for each age-year-sex combo, compute the difference between SS mean and rawdat
## will drop NA sex/age/weights likely losing years, leading to blank
survey_summary <- surveydata %>%
filter(!is.na(Sex) & !is.na(Age) & !is.na(Weight)) %>%
group_by(Sex, Year, Age, Project) %>%
dplyr::summarise(survey_meanwt = mean(Weight))
model_summary <- summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
fulldat <-  merge(survey_summary, model_summary,
by = c("Year","Sex","Age")) %>%
mutate(surv_minus_SS = survey_meanwt - SS_meanwt) %>%
filter(Age <= maxage)
fulldat$Sex <- as.character(factor(fulldat$Sex,
levels = c("F", "M", "U"), labels = c("Female", "Male", "Unsexed")))
p <- ggplot(fulldat, aes(x = Year, y = Age)) +
theme_bw()+
theme(panel.grid = element_blank(),
legend.position = 'bottom') +
geom_tile(aes(fill = surv_minus_SS)) +
scale_fill_gradient2() +
# scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Survey Mean Weight - SS mean Weight") +
coord_flip() +
scale_y_continuous(breaks = seq(0,30,5), sec.axis = dup_axis()) +
scale_x_reverse() +
geom_text(size = 2, aes(label = round(surv_minus_SS, 2))) +
facet_wrap(~Sex)
print(p)
if(png) ggsave(plot = p, filename = file.path(printfolder, "/meanweight_plot.png"))
return(fulldat)
}
plotMnwtMatrix(summaryoutput = replist,
surveydata = Data,
maxage = 30,
png = F)
plotMnwtMatrix <- function(summaryoutput, surveydata, fleet = 1, maxage = 30, png = F, printfolder){
## for each age-year-sex combo, compute the difference between SS mean and rawdat
## will drop NA sex/age/weights likely losing years, leading to blank
survey_summary <- surveydata %>%
filter(!is.na(Sex) & !is.na(Age) & !is.na(Weight)) %>%
group_by(Sex, Year, Age, Project) %>%
dplyr::summarise(survey_meanwt = mean(Weight))
model_summary <- summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
fulldat <-  merge(survey_summary, model_summary,
by = c("Year","Sex","Age")) %>%
mutate(surv_minus_SS = survey_meanwt - SS_meanwt) %>%
filter(Age <= maxage)
fulldat$Sex <- as.character(factor(fulldat$Sex,
levels = c("F", "M", "U"), labels = c("Female", "Male", "Unsexed")))
p <- ggplot(fulldat, aes(x = Year, y = Age)) +
theme_bw()+
theme(panel.grid = element_blank(),
legend.position = 'bottom') +
geom_tile(aes(fill = surv_minus_SS)) +
scale_fill_gradient2() +
# scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Survey Mean Weight - SS mean Weight") +
coord_flip() +
scale_y_continuous(breaks = seq(0,maxage,5), sec.axis = dup_axis()) +
scale_x_reverse() +
geom_text(size = 2, aes(label = round(surv_minus_SS, 2))) +
facet_wrap(~Sex)
print(p)
if(png) ggsave(plot = p, filename = file.path(printfolder, "/meanweight_plot.png"))
return(fulldat)
}
summaryoutput$FleetNames[fleet]
plotMnwtMatrix <- function(summaryoutput, surveydata, fleet = 1, maxage = 30, png = F, printfolder){
## for each age-year-sex combo, compute the difference between SS mean and rawdat
## will drop NA sex/age/weights likely losing years, leading to blank
survey_summary <- surveydata %>%
filter(!is.na(Sex) & !is.na(Age) & !is.na(Weight)) %>%
group_by(Sex, Year, Age, Project) %>%
dplyr::summarise(survey_meanwt = mean(Weight))
model_summary <- summaryoutput$wtatage %>%
filter(Fleet == fleet) %>%
mutate(Year = Yr) %>%
select(-Yr, -Seas, -Bio_Pattern, -BirthSeas, -Fleet) %>%
melt(id = c("Year","Sex")) %>%
mutate(Age = variable, SS_meanwt = as.numeric(value),
Sex = ifelse(Sex == 1, 'F','M')) %>%
select(-variable, - value) #%>% head()
fulldat <-  merge(survey_summary, model_summary,
by = c("Year","Sex","Age")) %>%
mutate(surv_minus_SS = survey_meanwt - SS_meanwt) %>%
filter(Age <= maxage)
fulldat$Sex <- as.character(factor(fulldat$Sex,
levels = c("F", "M", "U"), labels = c("Female", "Male", "Unsexed")))
p <- ggplot(fulldat, aes(x = Year, y = Age)) +
theme_bw()+
theme(panel.grid = element_blank(),
legend.position = 'bottom',
axis.text = element_text(size = 14),
axis.title  = element_text(size = 14)) +
geom_tile(aes(fill = surv_minus_SS)) +
scale_fill_gradient2() +
# scale_fill_gradient(low = "white", high = "red") +
labs(fill = "Survey Mean Weight - SS mean Weight",
title = paste0('Survey Mean Weight - Predicted Mean Weight, ',summaryoutput$FleetNames[fleet])) +
coord_flip() +
scale_y_continuous(breaks = seq(0,maxage,5), sec.axis = dup_axis()) +
scale_x_reverse() +
geom_text(size = 2, aes(label = round(surv_minus_SS, 2))) +
facet_wrap(~Sex)
print(p)
if(png) ggsave(plot = p, filename = file.path(printfolder, "/meanweight_plot.png"))
return(fulldat)
}
plotMnwtMatrix(summaryoutput = replist,
surveydata = Data,
maxage = 30,
png = F)
plotMnwtMatrix(summaryoutput, fleet = 2, surveydata = Data)
plotMnwtMatrix(summaryoutput, fleet = 8, surveydata = Data)
